[{"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\index.js":"1","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\App.js":"2","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\reportWebVitals.js":"3","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\routes.js":"4","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\AuthGaurd.js":"5","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\context\\AuthContext.js":"6","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Common\\Loader.js":"7","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\LandingMian.js":"8","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeMain.js":"9","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Registration\\Registration.js":"10","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Login\\Login.js":"11","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Tutorial\\Tutorial.js":"12","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\Faq.js":"13","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\Features.js":"14","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\Matrix.js":"15","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeStatusFor12x.js":"16","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeSideDashboard.js":"17","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeStatusFor5x.js":"18","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\Nav.js":"19","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Common\\ToastContainerCust.js":"20","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Utils\\Utils.js":"21","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\SubPart12X.js":"22","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\SubPart5X.js":"23"},{"size":517,"mtime":1613085013675,"results":"24","hashOfConfig":"25"},{"size":1702,"mtime":1613085013640,"results":"26","hashOfConfig":"25"},{"size":375,"mtime":1613085013676,"results":"27","hashOfConfig":"25"},{"size":1208,"mtime":1613085013677,"results":"28","hashOfConfig":"25"},{"size":417,"mtime":1613085013641,"results":"29","hashOfConfig":"25"},{"size":1143,"mtime":1613085013674,"results":"30","hashOfConfig":"25"},{"size":718,"mtime":1613085013642,"results":"31","hashOfConfig":"25"},{"size":3692,"mtime":1613087109852,"results":"32","hashOfConfig":"25"},{"size":4282,"mtime":1613087102551,"results":"33","hashOfConfig":"25"},{"size":8545,"mtime":1613087061166,"results":"34","hashOfConfig":"25"},{"size":10935,"mtime":1613087086504,"results":"35","hashOfConfig":"25"},{"size":11569,"mtime":1613085013653,"results":"36","hashOfConfig":"25"},{"size":8354,"mtime":1613085013648,"results":"37","hashOfConfig":"25"},{"size":3518,"mtime":1613085013649,"results":"38","hashOfConfig":"25"},{"size":2330,"mtime":1613085013650,"results":"39","hashOfConfig":"25"},{"size":1716,"mtime":1613085013645,"results":"40","hashOfConfig":"25"},{"size":11135,"mtime":1613085013645,"results":"41","hashOfConfig":"25"},{"size":2760,"mtime":1613085013646,"results":"42","hashOfConfig":"25"},{"size":2102,"mtime":1613085013646,"results":"43","hashOfConfig":"25"},{"size":416,"mtime":1613085013643,"results":"44","hashOfConfig":"25"},{"size":747,"mtime":1613088095402,"results":"45","hashOfConfig":"25"},{"size":9472,"mtime":1613085013647,"results":"46","hashOfConfig":"25"},{"size":9105,"mtime":1613085013647,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"tvrfno",{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"50"},"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\index.js",[],["104","105"],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\App.js",["106"],"import React, { Suspense, Fragment } from 'react';\r\nimport { Router, Switch, Route, HashRouter } from 'react-router-dom';\r\nimport { routes } from '../src/routes';\r\nimport { createBrowserHistory } from 'history';\r\nimport AuthContext from \"../src/context/AuthContext\";\r\nimport AuthGuard from '../src/AuthGaurd';\r\nimport './custom.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Loader from './Common/Loader'\r\n\r\n// const FOUNDATION_ADDRESS = 'TXdoGJ93xpjL6HZ53ZaN3ER7aUDDzyNaxV';\r\n// const WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\r\n\r\n\r\n\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"globalwrap\">\r\n      <AuthContext>\r\n        <HashRouter history={history}>\r\n          <RenderRoutes data={routes} />\r\n        </HashRouter>\r\n      </AuthContext>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nfunction RenderRoutes(props) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Loader active={true}></Loader>\r\n      }>\r\n      <Switch>\r\n        {props.data.map((route, i) => {\r\n          const Component = route.component;\r\n          const Guard = route.guard ? AuthGuard : Fragment;\r\n          return (\r\n            <Route\r\n              exact={route.exact}\r\n              key={i}\r\n              path={route.path}\r\n              render={(props) => (\r\n                <Guard>\r\n                  {route.routes\r\n                    ? <RenderRoutes data={route.routes} />\r\n                    : <Component {...props} />}\r\n                </Guard>\r\n              )}\r\n            />\r\n          )\r\n        })}\r\n      </Switch>\r\n    </Suspense>\r\n  )\r\n}\r\n","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\reportWebVitals.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\routes.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\AuthGaurd.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\context\\AuthContext.js",["107"],"import React, { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n// import ApiConfig from 'src/config/ApiConfig';\r\nexport const AuthContext = createContext();\r\n\r\nconst setSession = (accessToken) => {\r\n    if (accessToken) {\r\n        localStorage.setItem('accessToken', accessToken);\r\n        axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\r\n    } else {\r\n        localStorage.removeItem('accessToken');\r\n        delete axios.defaults.headers.common.Authorization;\r\n    }\r\n};\r\n\r\nfunction checkLogin() {\r\n    const accessToken = window.localStorage.getItem('accessToken');\r\n    return accessToken ? true : false;\r\n}\r\n\r\n\r\nexport default function AuthProvider(props) {\r\n    const [isLogin, setIsLogin] = useState(checkLogin());\r\n    const [userData, setUserData] = useState({});\r\n\r\n    let data = {\r\n        userLoggedIn: isLogin,\r\n        userData,\r\n        userLogIn: (type, data) => {\r\n            setSession(data);\r\n            setIsLogin(type);\r\n        },\r\n    }\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={data}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Common\\Loader.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\LandingMian.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeMain.js",["108"],"import React, { useEffect, useReducer } from 'react'\r\nimport BackOfficeSideDashboard from './BackOfficeSideDashboard'\r\nimport BackOfficeStatusFor12x from './BackOfficeStatusFor12x'\r\nimport BackOfficeStatusFor5x from './BackOfficeStatusFor5x'\r\nimport MyNav from './Nav'\r\n/*import xtronLogo from '../../assets/img/xtronlong.png'*/\r\n/*import { Link } from 'react-router-dom';*/\r\nimport { FaCog } from \"react-icons/fa\";\r\n\r\nconst initialState = {\r\n    total5x: 0,\r\n    buyIcon5x: false,\r\n    total12x: 0,\r\n    buyIcon12x: false,\r\n    loginUser: 0,\r\n    total: 0,\r\n    usdValue: 0,\r\n    partnerCount: 0,\r\n    lang: \"English\",\r\n    partnerCountM2: 0\r\n}\r\n\r\nexport const BackofficeContext = React.createContext(initialState)\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'chnage5x':\r\n            return {\r\n                ...state,\r\n                total: state.total + parseFloat(action.payload),\r\n                total5x: parseFloat(state.total5x) + parseFloat(action.payload)\r\n            };\r\n        case 'change12x':\r\n            return {\r\n                ...state,\r\n                total: state.total + parseFloat(action.payload),\r\n                total12x: parseFloat(state.total12x) + parseFloat(action.payload)\r\n\r\n            };\r\n        case 'partnerCount':\r\n            return {\r\n                ...state,\r\n                partnerCount: action.payload\r\n            };\r\n        case 'partnerCountM2':\r\n            return {\r\n                ...state,\r\n                partnerCountM2: state.partnerCountM2 + action.payload\r\n            };\r\n        case 'lang':\r\n            return {\r\n                ...state,\r\n                lang: action.payload\r\n            };\r\n        case 'SetusdValue':\r\n            return { ...state, usdValue: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction BackOfficeMain(props) {\r\n    \r\n    const [backofficeData, dispatch] = useReducer(reducer, initialState)\r\n    let lang = props.location && props.location.state && props.location.state.lang\r\n    lang = typeof lang === \"undefined\" ? \"English\" : \"Spanish\"\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            document.title = \"XTRON\"\r\n            if (props.location.state && typeof props.location.state !== 'undefined') {\r\n                dispatch({ type: 'setloginUser', payload: props.location.state.id })\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    function refresh(){\r\n        localStorage.clear();\r\n        document.getElementById('refreshCog').classList.add('rotate', 'refreshbtn-visited');\r\n        \r\n        /*window.location.reload(false);*/\r\n    }\r\n    return (\r\n        <BackofficeContext.Provider value={{ backofficeDataM: backofficeData, dispatchM: dispatch }}>\r\n            <div className=\"\" id=\"backofficewrap\">\r\n                <MyNav />\r\n                <h2 className=\"text-center whitext mt-5\">Dashboard</h2>\r\n                <div className=\"text-center logo-payment-wrap\" style={{ marginTop: \"0px\" }}>\r\n                    {/*<Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                    </Link>*/}\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row \" id=\"backoffice_row\">\r\n                        <div className=\"col-lg-3\">\r\n                            <BackOfficeSideDashboard lang={lang} />\r\n                        </div>\r\n                        <div className=\"col-lg-9\">\r\n                            <BackOfficeStatusFor5x lang={lang} />\r\n                            <BackOfficeStatusFor12x lang={lang} />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-center refresh-wrap\">\r\n                        <h3 className=\"whitext\">App stuck or unresponsive?</h3>\r\n                    <button id=\"refreshCog\" className=\"refreshbtn\" onClick={() => refresh()}>< FaCog/><span id=\"refresh1\">Refresh</span></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </BackofficeContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BackOfficeMain\r\n","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Registration\\Registration.js",["109","110"],"import React, { useEffect, useState } from 'react'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport TronWeb from 'tronweb'\r\nimport { toast } from 'react-toastify';\r\nimport { FaExclamationCircle, FaSignInAlt } from \"react-icons/fa\";\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport Utils from '../../Utils/Utils'\r\nimport { MyClockLoader } from '../../Common/Loader'\r\n\r\n\r\nfunction Registration(props) {\r\n    const lang = props.location && props.location.state\r\n    const history = useHistory();\r\n    const [backOfficeID, SetBackOfficeID] = useState('')\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n    const [isModalOpen, SetisModalOpen] = useState(false)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n    const { id } = useParams();\r\n    const CustomToastWithLink = () => (\r\n        <p>\r\n            Please login to your Tronlink account\r\n        </p>\r\n    );\r\n\r\n    useEffect(async () => {\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n\r\n            if (tronWebState.installed) {\r\n                settronWeb(tronWebState)\r\n                return resolve();\r\n            }\r\n            let tries = 0;\r\n            const timer = setInterval(() => {\r\n                if (tries >= 10) {\r\n                    const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n                    settronWeb({\r\n                        installed: false,\r\n                        loggedIn: false\r\n                    });\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                if (!tronWebState.installed) {\r\n                    return tries++;\r\n                }\r\n                else {\r\n                    clearInterval(timer);\r\n                }\r\n                settronWeb(tronWebState)\r\n\r\n                resolve();\r\n            }, 100);\r\n        })\r\n        await Utils.setTronWeb(window.tronWeb);\r\n        setLoggedIn(true)\r\n    }, []);\r\n\r\n    const registationSubmit = async () => {\r\n        let warnmsg = \"Porfavor no actualice la página y espere mientras su pago es procesado. Esto puede tardar unos minutos.\"\r\n\r\n        localStorage.removeItem('backOfficeID')\r\n        if (backOfficeID !== '' || id !== undefined) {\r\n            if (loggedIn) {\r\n                try {\r\n                    SetisModalOpen(true)\r\n                    if (lang === 'English') {\r\n                        warnmsg = \"Please do not refresh the page and wait while your payment is processed. This may take a few minutes.\"\r\n                    }\r\n                    toast.warn(warnmsg, {\r\n                        position: \"top-center\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: false,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                    const idToAddress = await Utils.contract.idToAddress(backOfficeID).call();\r\n                    const tronAdd = TronWeb.address.fromHex(idToAddress)\r\n                    await Utils.contract.registrationExt(tronAdd).send({\r\n                        feeLimit: 100000000,\r\n                        callValue: 440000000,\r\n                        shouldPollResponse: true\r\n                    });\r\n                    SetisModalOpen(false)\r\n                    history.push({\r\n                        pathname: \"/back-office-main\",\r\n                        state: { lang: lang }\r\n                    })\r\n                    \r\n                    window.location.reload(false);\r\n                } catch (error) {\r\n                    SetisModalOpen(false)\r\n                    console.log(error)\r\n                    toast.error(\"error\", error)\r\n                }\r\n            }\r\n            else {\r\n                toast.error(CustomToastWithLink)\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.warn(\"Enter your sponsor's ID\")\r\n            }\r\n            else {\r\n                toast.warn(\"Ingrese el ID de su patrocinador\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"\" id=\"backofficewrap\">\r\n            <ToastContainerCust />\r\n            <div className=\"container\">\r\n                <div className=\"text-center logo-payment-wrap\">\r\n                    {\r\n                        isModalOpen ?\r\n                            <div className=\"logo-payment-link\">\r\n                                <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                            </div> :\r\n                            <Link to={{\r\n                                pathname: \"/\",\r\n                                state: lang\r\n                            }} className=\"logo-payment-link\">\r\n                                <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                            </Link>\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"row \" id=\"\">\r\n                    <div className=\"registration-main\" style={{ width: \"100%\" }}>\r\n                        <div className=\"xwrap\">\r\n                            <div className=\"text-center registration-items\">\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h2>Registration Area</h2>\r\n                                        :\r\n                                        <h2>Área de registro</h2>\r\n                                }\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4>If you don't have a sponsor, use 1</h4>\r\n                                        :\r\n                                        <h4>Si no tiene un patrocinador, use 1</h4>\r\n                                }\r\n\r\n\r\n                                <MyClockLoader active={isModalOpen} />\r\n                                {id ?\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={id} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} readOnly />\r\n                                    </div>\r\n                                    :\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={backOfficeID} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} />\r\n                                    </div>\r\n                                }\r\n                                <div className=\"registration-btn\">\r\n                                    <button className=\"btn btn-success custombtn\" onClick={() => registationSubmit()} disabled={isModalOpen} >{lang === 'English' ? \"REGISTER\" : \"REGISTRO\"}</button>\r\n                                </div>\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4><FaExclamationCircle /> Please confirm your sponsor's ID before making a payment.</h4>\r\n                                        :\r\n                                        <h4><FaExclamationCircle /> Verifique el ID de su patrocinador antes de realizar un pago.</h4>\r\n                                }\r\n                                <div className=\"h20\"></div>\r\n                                {\r\n                                    isModalOpen ? <span><h4><FaSignInAlt /> Login</h4></span> : <Link to={{ pathname: \"/login\", state: lang }}><h4><FaSignInAlt /> Login</h4></Link>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration\r\n","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Login\\Login.js",["111","112","113"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext'\r\n// import TronWeb from 'tronweb'\r\nimport { FaSignInAlt } from \"react-icons/fa\";\r\nimport { toast } from 'react-toastify';\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\nimport ReactGA from 'react-ga';\r\nReactGA.initialize('G-6MQ8JWRM63'); /*Unique Google Analytics ID*/\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\n\r\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\r\n\r\n\r\n\r\nfunction switchTo1() {\r\n    \r\n    document.getElementById('method1btn').classList.add('switchbtn-active');\r\n    document.getElementById('method2btn').classList.remove('switchbtn-active');\r\n    document.getElementById('method1wrap').classList.remove('hide');\r\n    document.getElementById('method2wrap').classList.add('hide');\r\n}\r\n\r\nfunction switchTo2() {\r\n    \r\n    document.getElementById('method1btn').classList.remove('switchbtn-active');\r\n    document.getElementById('method2btn').classList.add('switchbtn-active');\r\n    document.getElementById('method1wrap').classList.add('hide');\r\n    document.getElementById('method2wrap').classList.remove('hide');\r\n}\r\n\r\nfunction Login(props) {\r\n    const lang = props.location && props.location.state\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext);\r\n    const [backOfficeID, SetBackOfficeID] = useState('')\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n\r\n    useEffect(async () => {\r\n        (async function () {\r\n            await new Promise(resolve => {\r\n                const tronWebState = {\r\n                    installed: !!window.tronWeb,\r\n                    loggedIn: window.tronWeb && window.tronWeb.ready\r\n                };\r\n                if (tronWebState.installed) {\r\n                    settronWeb(tronWebState)\r\n                    return resolve();\r\n                }\r\n                let tries = 0;\r\n                const timer = setInterval(() => {\r\n                    if (tries >= 10) {\r\n                        const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                        window.tronWeb = new TronWeb(\r\n                            TRONGRID_API,\r\n                            TRONGRID_API,\r\n                            TRONGRID_API\r\n                        );\r\n                        settronWeb({\r\n                            installed: false,\r\n                            loggedIn: false\r\n                        });\r\n                        clearInterval(timer);\r\n                        return resolve();\r\n                    }\r\n                    tronWebState.installed = !!window.tronWeb;\r\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                    if (!tronWebState.installed) {\r\n                        return tries++;\r\n                    }\r\n                    else {\r\n                        clearInterval(timer);\r\n                    }\r\n                    settronWeb(tronWebState)\r\n                    resolve();\r\n                }, 100);\r\n            })\r\n            await Utils.setTronWeb(window.tronWeb);\r\n            setLoggedIn(true)\r\n        })();\r\n    }, []);\r\n\r\n    const CustomToastWithLink = () => (\r\n        <p>\r\n            {lang === 'English'\r\n                ?\r\n                <span>To access XTRON you must install TronLink.</span>\r\n                :\r\n                <span>Para acceder a XTRON debe instalar TronLink.</span>\r\n            }\r\n\r\n        </p>\r\n    );\r\n\r\n    const loginSubmit = async () => {\r\n        if (backOfficeID !== '') {\r\n            if (loggedIn) {\r\n                try {\r\n                    const idToAddress = await Utils.contract.idToAddress(backOfficeID).call();\r\n                    auth.userLogIn(true, 'Login');\r\n                    localStorage.removeItem('backOfficeID')\r\n                    localStorage.setItem('backOfficeID', TronWeb.address.fromHex(idToAddress));\r\n                    history.push({\r\n                        pathname: \"/back-office-main\",\r\n                        state: { lang: lang }\r\n                    })\r\n                    \r\n                    window.location.reload(false);\r\n                }\r\n                catch (error) {\r\n                    toast.error(\"Error\")\r\n                    console.log(error)\r\n                }\r\n            }\r\n            else {\r\n                toast.error(CustomToastWithLink)\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.warn(\"Enter your ID\")\r\n            }\r\n            else {\r\n                toast.warn(\"Introduzca su ID\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    const loginSubmit2 = async () => {\r\n        if (backOfficeID !== '') {\r\n            if (loggedIn) {\r\n                if (backOfficeID.length > 33) {\r\n                    try {\r\n                \r\n                        try {\r\n                            auth.userLogIn(true, 'Login');\r\n                            localStorage.removeItem('backOfficeID')\r\n                            localStorage.setItem('backOfficeID', backOfficeID);\r\n                            history.push({\r\n                             pathname: \"/back-office-main\",\r\n                              state: { lang: lang }\r\n                            })\r\n                            ReactGA.event({\r\n                            category: 'User',\r\n                            action: 'Successful Login'\r\n                            });\r\n                            window.location.reload(false);\r\n                            }\r\n                        catch (error) {\r\n                            toast.error(\"Error\")\r\n                            console.log(error)\r\n                        }\r\n                \r\n                    } catch (error) {\r\n                        alert.show(\"Wallet Error\")\r\n                        \r\n                        }\r\n                } else {\r\n                    toast.error(\"Wallet invalida\")\r\n                }\r\n            }\r\n            else {\r\n                toast.error(CustomToastWithLink)\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.warn(\"Enter your ID\")\r\n            }\r\n            else {\r\n                toast.warn(\"Introduzca su ID\")\r\n            }\r\n\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"\" id=\"backofficewrap\">\r\n            <ToastContainerCust />\r\n            <div className=\"container\">\r\n                <div className=\"text-center logo-payment-wrap\">\r\n                    <Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                    </Link>\r\n                </div>\r\n                <div className=\"row \" id=\"\">\r\n                    <div className=\"\" style={{ width: \"100%\" }}>\r\n                        <div className=\"xwrap\">\r\n                            <div className=\"text-center registration-items\">\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h2>Login Area</h2>\r\n                                        :\r\n                                        <h2>Área de inicio de sesión</h2>\r\n                                }\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4>Enter your ID/Wallet to access your backoffice</h4>\r\n                                        :\r\n                                        <h4>Ingrese su ID/Wallet para acceder a su backoffice</h4>\r\n                                }\r\n                                <div className=\"login-switch-wrap\">\r\n                                    <button id=\"method1btn\" className=\"switchbtn switchbtn-active\" onClick={() => switchTo1()}>ID</button>\r\n                                    <button id=\"method2btn\" className=\"switchbtn\" onClick={() => switchTo2()}> TRX Wallet</button>\r\n                                </div>\r\n                                <div id=\"method1wrap\" className=\"login-method-1\">\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={backOfficeID} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"registration-btn\">\r\n                                        <button className=\"btn btn-success custombtn\" onClick={() => loginSubmit()} >LOGIN</button>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n\r\n                                <div id=\"method2wrap\" className=\"login-method-2 hide\">\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={backOfficeID} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"registration-btn\">\r\n                                        <button className=\"btn btn-success custombtn\" onClick={() => loginSubmit2()} >LOGIN</button>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                \r\n                                <div className=\"h20\"></div>\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4>Don't have an account yet?</h4>\r\n                                        :\r\n                                        <h4>¿Aún no tienes una cuenta?</h4>\r\n                                }\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <Link to={{ pathname: \"/registration\", state: lang }}><h4><FaSignInAlt />  Register</h4></Link>\r\n                                        :\r\n                                        <Link to={{ pathname: \"/registration\", state: lang }}><h4><FaSignInAlt />  REGISTRO</h4></Link>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Tutorial\\Tutorial.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\Faq.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\Features.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\Landing\\Matrix.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeStatusFor12x.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeSideDashboard.js",["114","115","116"],"import React, { useEffect, useContext } from 'react'\r\nimport tron32x from '../../assets/img/tron32x.png'\r\nimport x5matrix from '../../assets/img/m1.png'\r\nimport x12matrix from '../../assets/img/m2.png'\r\nimport { useState } from 'react'\r\nimport { FaUsers, FaRegCopy } from \"react-icons/fa\";\r\nimport { BackofficeContext } from './BackOfficeMain'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\nimport TostContainer from '../../Common/ToastContainerCust'\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios'\r\n\r\nfunction copyAffiliateLink() {\r\n    var copyText = document.getElementById(\"refLink\");\r\n    copyText.select();\r\n    // copyText.setSelectionRange(0, 99999); /*For mobile devices*/\r\n    document.execCommand(\"copy\");\r\n    toast.success(\"Copied\")\r\n}\r\n\r\nfunction BackOfficeSideDashboard(props) {\r\n\r\n    const lang = props.lang\r\n       \r\n    const backofficeContextL = useContext(BackofficeContext)\r\n\r\n    const [UserId, setUserId] = useState(0)\r\n    const [partnersCount, setpartnersCount] = useState(0)\r\n    const [tronAccount, setTronAccount] = useState(\"\")\r\n    const [x12balanceTRX, setx12balanceTRX] = useState(0)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n\r\n\r\n    useEffect(async () => {\r\n        axios.get(`https://api.coinlore.net/api/ticker/?id=2713`)\r\n            .then(res => {\r\n                backofficeContextL.dispatchM({ type: 'SetusdValue', payload: res.data[0].price_usd })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                window.location.reload(false);\r\n            })\r\n\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n            if (tronWebState.installed) {\r\n                settronWeb(tronWebState)\r\n                return resolve();\r\n            }\r\n            let tries = 0;\r\n            const timer = setInterval(() => {\r\n                if (tries >= 10) {\r\n                    const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n\r\n                    settronWeb({\r\n                        installed: false,\r\n                        loggedIn: false\r\n                    });\r\n\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                if (!tronWebState.installed) {\r\n                    return tries++;\r\n                }\r\n                else {\r\n                    clearInterval(timer);\r\n                }\r\n                settronWeb(tronWebState)\r\n                resolve();\r\n            }, 100);\r\n        })\r\n\r\n        await Utils.setTronWeb(window.tronWeb);\r\n        if (localStorage.getItem('backOfficeID') !== null && localStorage.getItem('accessToken') === 'Login') {\r\n            setTronAccount(localStorage.getItem('backOfficeID'))\r\n            try {\r\n                const lastlavel = await Utils.contract.users(localStorage.getItem('backOfficeID')).call();\r\n                const x12balance = await Utils.contract.x12balance(localStorage.getItem('backOfficeID')).call();\r\n                setx12balanceTRX((parseInt(x12balance._hex) / 1000000));\r\n                console.log(\"x12balance\", (parseInt(x12balance._hex) / 1000000))\r\n                setUserId(lastlavel.id._hex)\r\n                setpartnersCount(lastlavel.partnersCount._hex)\r\n                backofficeContextL.dispatchM({ type: 'partnerCount', payload: lastlavel.partnersCount._hex })\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        else {\r\n            setTronAccount(window.tronWeb.defaultAddress.base58)\r\n            try {\r\n                const lastlavel = await Utils.contract.users(window.tronWeb.defaultAddress.base58).call();\r\n                setUserId(lastlavel.id._hex)\r\n                setpartnersCount(lastlavel.partnersCount._hex)\r\n                backofficeContextL.dispatchM({ type: 'partnerCount', payload: lastlavel.partnersCount._hex })\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    function getFlooredFixed(v, d) {\r\n        return (Math.floor(v * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"userdef xwrap\">\r\n                <TostContainer />\r\n                <div className=\"userdefinition\">\r\n                    <div className=\"paymentlogo\">\r\n                        {\r\n                            lang === \"English\"\r\n                                ? \r\n                                <h3 className=\"whitext\">MY ID: <span className=\"ctatext\">{parseInt(UserId)}</span></h3>\r\n                                :\r\n                                <h3 className=\"whitext\">MI ID: <span className=\"ctatext\">{parseInt(UserId)}</span></h3>\r\n                        }\r\n\r\n                    </div>\r\n                    {/* <div className=\"userinfo text-right\">\r\n                        <h4 className=\"whitext\">{parseInt(partnersCount)} <FaUsers color=\"#35FF69\" /></h4>\r\n                    </div> */}\r\n                </div>\r\n                {\r\n                        lang === 'English' ?\r\n                            <h3 className=\"whitext\">Total Earnings</h3>\r\n                            :\r\n                            <h3 className=\"whitext\">Ganancias Totales</h3>\r\n                    }\r\n                <h2 className=\"text-left ctatext\">\r\n                    $ {getFlooredFixed(((backofficeContextL.backofficeDataM.total5x + x12balanceTRX) * backofficeContextL.backofficeDataM.usdValue), 2)} USD\r\n                </h2>\r\n                <h2 className=\"subtext earning_amount text-left\">{backofficeContextL.backofficeDataM.total5x + x12balanceTRX} TRX <img src={tron32x} className=\"tron_currency\" alt=\"tron32x\" /></h2>\r\n                <hr className=\"custom_hr\" />\r\n                <div className=\"matrix_earnings\" style={{ paddingTop: \"0\" }}>\r\n                    {/* <img className=\"matrix_logo\" src={x5matrix} alt=\"x5matrix\" /> */}\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <img className=\"matrix_logo\" src={x5matrix} alt=\"x5matrix\" />\r\n                        <div className=\"userinfo text-right\" style={{ marginTop: \"20%\" }}>\r\n                            <h3 className=\"whitext\">{parseInt(partnersCount)} <FaUsers color=\"#35FF69\" /></h3>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {\r\n                        lang === 'English' ?\r\n                            <h3 className=\"whitext\">Earnings</h3>\r\n                            :\r\n                            <h3 className=\"whitext\">Ganancias</h3>\r\n                    }\r\n\r\n                    <div className=\"earning_amount_container\">\r\n                        <h2 className=\"ctatext earning_amount\">$ {getFlooredFixed((backofficeContextL.backofficeDataM.total5x * backofficeContextL.backofficeDataM.usdValue), 2)} USD</h2>\r\n                    </div>\r\n                    <h2 className=\"earning_amount_trx subtext\">{backofficeContextL.backofficeDataM.total5x} TRX  <img src={tron32x} className=\"tron_currency\" alt=\"tron32x\" /></h2>\r\n                </div>\r\n                <hr className=\"custom_hr\" />\r\n                <div className=\"matrix_earnings\" style={{ paddingTop: \"0\" }}>\r\n                    {/* <img className=\"matrix_logo\" src={x12matrix} alt=\"x12matrix\" /> */}\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <img className=\"matrix_logo\" src={x12matrix} alt=\"x12matrix\" />\r\n                        <div className=\"userinfo text-right\" style={{ marginTop: \"20%\" }}>\r\n                            <h3 className=\"whitext\">{parseInt(backofficeContextL.backofficeDataM.partnerCountM2)} <FaUsers color=\"#35FF69\" /></h3>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        lang === 'English' ?\r\n                            <h3 className=\"whitext\">Earnings</h3>\r\n                            :\r\n                            <h3 className=\"whitext\">Ganancias</h3>\r\n                    }\r\n\r\n                    <div className=\"earning_amount_container\">\r\n                        <h2 className=\"ctatext earning_amount\">$ {getFlooredFixed((x12balanceTRX * backofficeContextL.backofficeDataM.usdValue), 2)} USD</h2>\r\n                    </div>\r\n                    <h2 className=\"earning_amount_trx subtext\">{x12balanceTRX} TRX  <img src={tron32x} className=\"tron_currency\" alt=\"tron32x\" /></h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"affiliate_wrap xwrap\">\r\n                <div className=\"affiliate_heading\">\r\n                    {\r\n                        lang === 'English' ?\r\n                            <h3 className=\"ctatext\">Affiliate Link</h3>\r\n                            :\r\n                            <h3 className=\"ctatext\">Enlace de afiliado</h3>\r\n                    }\r\n\r\n                    <h3 className=\"whitext\">{parseInt(partnersCount)} <FaUsers color=\"#35FF69\" /></h3>\r\n                </div>\r\n                <div className=\"link_container\">\r\n                    {/* <input type=\"text\" value={`${process.env.REACT_APP_URL}/#/registration/${parseInt(UserId)}`} id=\"refLink\" readOnly /> */}\r\n                    <input type=\"text\" value={`https://xtron.online/#/registration/${parseInt(UserId)}`} id=\"refLink\" readOnly />\r\n                    <FaRegCopy className=\"ctatext\" onClick={copyAffiliateLink} />\r\n                </div>\r\n            </div>\r\n            <div className=\"wallet_wrap xwrap\">\r\n                {\r\n                    lang === 'English' ?\r\n                        <h3 className=\"ctatext\">My Wallet:</h3>\r\n                        :\r\n                        <h3 className=\"ctatext\">Mi billetera:</h3>\r\n                }\r\n                <p className=\"whitext\">{tronAccount}</p>\r\n            </div>\r\n            <div className=\"contract_wrap xwrap\">\r\n                {\r\n                    lang === 'English' ?\r\n                        <h3 className=\"ctatext\">Contract Address :</h3>\r\n                        :\r\n                        <h3 className=\"ctatext\">Dirección del contrato:</h3>\r\n                }\r\n                <a href={`https://tronscan.org/#/contract/TWDECXnA4oAGrDYRNS7ex1izx3Mgys9SRp/transactions`} rel=\"noreferrer\" target=\"_blank\"> <p className=\"whitext\">TWDECXnA4oAGrDYRNS7ex1izx3Mgys9SRp</p></a>\r\n                {/*<a href={`https://shasta.tronscan.org/#/contract/${process.env.REACT_APP_CONTRACT_ADDRESS}/code`} target=\"_blank\"> <p className=\"whitext\">{process.env.REACT_APP_CONTRACT_ADDRESS}</p></a>*/}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BackOfficeSideDashboard\r\n","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\BackOfficeStatusFor5x.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\Nav.js",["117","118"],"import React, { useEffect, useReducer } from 'react'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link } from 'react-router-dom';\r\nimport { FaPowerOff, FaRegFileAlt, FaDollarSign } from \"react-icons/fa\";\r\n\r\nfunction MyNav(lang) {\r\n    \r\n    return (\r\n        <div className=\"navig d-flex justify-content-center shadow\">\r\n                    <div className=\"container d-flex justify-content-between align-items-center\">\r\n                    \r\n\r\n                    <Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <img className=\"logo-payment-nav\" src={xtronLogo} alt=\"logo xtron\" />\r\n                    </Link>\r\n                    \r\n                    \r\n                    <div className=\"action-links\">\r\n                    <Link to={{\r\n                        pathname: \"/back-office-main\",\r\n                        state: lang\r\n                    }} className=\"navicon\">\r\n                        <FaDollarSign size={30} /> <span className=\"naviconTXT\">Dashboard</span>\r\n                    </Link>\r\n\r\n                    {/*<a rel=\"noreferrer\" target=\"_blank\" className=\"navicon\" href=\"https://t.me/xtronoficial\"><FaTelegramPlane size={30} /> <span className=\"naviconTXT\">News</span></a>*/}\r\n                        \r\n                    \r\n                   \r\n                    <Link to={{\r\n                        pathname: \"/tutorial\",\r\n                        state: lang\r\n                    }} className=\"navicon\">\r\n                        <FaRegFileAlt size={30} /> <span className=\"naviconTXT\">Tutorial</span>\r\n                    </Link>\r\n\r\n                    \r\n\r\n                    <Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <FaPowerOff size={30} color={'#f33f3f'}/>\r\n                    </Link>\r\n\r\n\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default MyNav","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Common\\ToastContainerCust.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Utils\\Utils.js",[],"C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\SubPart12X.js",["119","120","121"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { BackofficeContext } from './BackOfficeMain'\r\nimport { toast } from 'react-toastify';\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\nimport Loader from '../../Common/Loader'\r\nimport { MyClockLoader } from '../../Common/Loader'\r\n\r\nlet toggleLevel = true\r\n\r\nfunction SubPart12X({ level, ammount, lang }) {\r\n    const [numberOfActiveLevels, setnumberOfActiveLevels] = useState(0);\r\n    const [numberOfSubActiveLevels, setnumberOfSubActiveLevels] = useState(0)\r\n    const [isBuyVisible, setIsBuyVisible] = useState(false);\r\n    const [isBuyEnable, setIsBuyEnable] = useState(false)\r\n    const [buyLevelLoader, setbuyLevelLoader] = useState(false)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n    const backofficeContextL = useContext(BackofficeContext)\r\n    const [isModalOpen, SetisModalOpen] = useState(false)\r\n\r\n    function getFlooredFixed(v, d) {\r\n        return (Math.floor(v * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);\r\n    }\r\n    useEffect(() => {\r\n        (async function () {\r\n            await new Promise(resolve => {\r\n                const tronWebState = {\r\n                    installed: !!window.tronWeb,\r\n                    loggedIn: window.tronWeb && window.tronWeb.ready\r\n                };\r\n\r\n                if (tronWebState.installed) {\r\n                    settronWeb(tronWebState)\r\n                    return resolve();\r\n                }\r\n                let tries = 0;\r\n                const timer = setInterval(() => {\r\n                    if (tries >= 10) {\r\n                        const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                        window.tronWeb = new TronWeb(\r\n                            TRONGRID_API,\r\n                            TRONGRID_API,\r\n                            TRONGRID_API\r\n                        );\r\n\r\n                        settronWeb({\r\n                            installed: false,\r\n                            loggedIn: false\r\n                        });\r\n\r\n                        clearInterval(timer);\r\n                        return resolve();\r\n                    }\r\n                    tronWebState.installed = !!window.tronWeb;\r\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                    if (!tronWebState.installed)\r\n                        return tries++;\r\n                    settronWeb(tronWebState)\r\n                    resolve();\r\n                }, 100);\r\n            })\r\n            await Utils.setTronWeb(window.tronWeb);\r\n            showLevelDetails()\r\n        })()\r\n    }, [])\r\n\r\n    const FunBuyLevel = async (level, ammount) => {\r\n        let warnmsg = \"Please do not refresh the page and wait while we are processing your payment. This can take a few minutes.\"\r\n\r\n        if (lang !== 'English') {\r\n            warnmsg = \"No actualice la página y espere mientras procesamos su pago. Esto puede tardar unos minutos.\"\r\n        }\r\n        if (localStorage.getItem('backOfficeID') === null || localStorage.getItem('backOfficeID') === window.tronWeb.defaultAddress.base58) {\r\n            try {\r\n                setbuyLevelLoader(true)\r\n                toast.warn(warnmsg, {\r\n                    position: \"top-center\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                await Utils.contract.buyNewLevel(2, level).send({\r\n                    feeLimit: 100000000,\r\n                    callValue: (ammount * 1000000) + ((ammount * 1000000) * 0.10),\r\n                    shouldPollResponse: true\r\n                });\r\n                setbuyLevelLoader(false)\r\n                window.location.reload(false);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setbuyLevelLoader(false)\r\n                toast.error(\"error\");\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.error(\"Purchase in preview mode is not available! Please please Register with your Tron wallet.\");\r\n            }\r\n            else {\r\n                toast.error(\"¡La compra en modo de vista previa no está disponible! Regístrese con su billetera Tron.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const showLevelDetails = async () => {\r\n        let userAddress = window.tronWeb.defaultAddress.base58\r\n        if (localStorage.getItem('backOfficeID') !== null && localStorage.getItem('accessToken') === 'Login') {\r\n            userAddress = localStorage.getItem('backOfficeID')\r\n        }\r\n        try {\r\n            SetisModalOpen(true)\r\n            const lastlavel = await Utils.contract.usersactiveX12Levels(userAddress, level).call();\r\n            if (lastlavel) {\r\n                setIsBuyEnable(false)\r\n                setIsBuyVisible(false)\r\n            }\r\n            else {\r\n                setIsBuyVisible(true)\r\n                if (toggleLevel) {\r\n                    setIsBuyEnable(true)\r\n                    toggleLevel = false\r\n                }\r\n                else {\r\n                    setIsBuyEnable(false)\r\n                }\r\n            }\r\n            const userX5Matrix = await Utils.contract.usersx12Matrix(userAddress, level).call();\r\n            if (userX5Matrix.length > 0) {\r\n                setnumberOfActiveLevels(userX5Matrix[1].length)\r\n                setnumberOfSubActiveLevels(userX5Matrix[2].length)\r\n                console.log(\"userX5Matrix[1].length\", userX5Matrix[1].length)\r\n                console.log(\"userX5Matrix[2].length\", userX5Matrix[2].length)\r\n                let sum = 0;\r\n                if (userX5Matrix[1].length > 0 && lastlavel) {\r\n                    // sum = parseFloat(ammount) + (parseFloat(userX5Matrix[1].length) * parseFloat(parseFloat(ammount) / 2) + (parseFloat(userX5Matrix[2].length) * (parseFloat(parseFloat(ammount) / 4))))\r\n                    // backofficeContextL.dispatchM({ type: 'change12x', payload: getFlooredFixed(sum, 3) })\r\n\r\n                    sum = userX5Matrix[1].length + userX5Matrix[2].length\r\n                    backofficeContextL.dispatchM({ type: 'partnerCountM2', payload: sum })\r\n                }\r\n            }\r\n            else {\r\n                if (lang === 'English') {\r\n                    toast.warn(\"Error\")\r\n                }\r\n                else {\r\n                    toast.warn(\"Error\")\r\n                }\r\n            }\r\n            SetisModalOpen(false)\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            SetisModalOpen(false)\r\n        }\r\n    }\r\n\r\n    const getActiveLevels = [...Array(numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position position_active\"></div>)\r\n    const getNonActiveLevels = [...Array(3 - numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position\"></div>)\r\n    const getSubActiveLevels = [...Array(numberOfSubActiveLevels)].map((e, i) => <div key={i} className=\"subposition position_active\"></div>)\r\n    const getNonSubActiveLevels = [...Array(8 - numberOfSubActiveLevels)].map((e, i) => <div key={i} className=\"subposition\"></div>)\r\n    const getBuyIcon = isBuyEnable ?\r\n        <i className=\"buy-iconX12 buy-icon\" alt=\"buyIcon\" onClick={() => FunBuyLevel(level, ammount)} ></i> :\r\n        <i className=\"buy-iconX12\" alt=\"buyIcon\"></i>\r\n\r\n    return (\r\n        <div className=\"matrix_box_x12\">\r\n            <ToastContainerCust />\r\n            <Loader active={isModalOpen} />\r\n            <MyClockLoader active={buyLevelLoader} />\r\n            {/* <!--single matrix box--> */}\r\n            <div className=\"box_basket\" style={{ position: \"relative\" }}>\r\n                <div className=\"box_number_x12\" id=\"box_number_x12\">{level}</div>\r\n                {isBuyVisible ? getBuyIcon : null}\r\n                <button className=\"btn btn-info basket_btn basket_active\">{ammount} trx</button>\r\n            </div>\r\n            <div className=\"box_positions_x12\">\r\n                {getActiveLevels}\r\n                {getNonActiveLevels}\r\n            </div>\r\n            <div className=\"box_subpositions\">\r\n                {getSubActiveLevels}\r\n                {getNonSubActiveLevels}\r\n                <div className=\"subposition reset-bg\"></div>\r\n            </div>\r\n            <div className=\"flow_lines\">\r\n                <div className=\"flow_line line_one_x12\"></div>\r\n                <div className=\"flow_line line_two_x12\"></div>\r\n                <div className=\"flow_line line_three_x12\"></div>\r\n                <div className=\"flow_line line_four_x12\"></div>\r\n                <div className=\"flow_line line_five_x12\"></div>\r\n                <div className=\"flow_line line_six_x12\"></div>\r\n                <div className=\"flow_line line_seven_x12\"></div>\r\n                <div className=\"flow_line line_eight_x12\"></div>\r\n                <div className=\"flow_line line_nine_x12\"></div>\r\n                <div className=\"flow_line line_ten_x12\"></div>\r\n                <div className=\"flow_line line_eleven_x12\"></div>\r\n                <div className=\"flow_line line_twelve_x12\"></div>\r\n                <div className=\"flow_line line_thirteen_x12\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubPart12X\r\n","C:\\Users\\Marketing\\Desktop\\SINFA-OFF\\XtronSolution\\src\\Components\\BackOffice\\SubPart5X.js",["122","123","124","125"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { BackofficeContext } from './BackOfficeMain'\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\nimport Loader from '../../Common/Loader'\r\nimport { MyClockLoader } from '../../Common/Loader'\r\nimport { FaUsers } from \"react-icons/fa\";\r\nimport { FiRefreshCcw } from \"react-icons/fi\";\r\n\r\n\r\nlet toggleLevel = true\r\n\r\nfunction SubPart5X({ level, ammount, lang }) {\r\n    const [numberOfActiveLevels, setnumberOfActiveLevels] = useState(0);\r\n    const backofficeContextL = useContext(BackofficeContext)\r\n    const [isModalOpen, SetisModalOpen] = useState(false)\r\n    const [isBuyVisible, setIsBuyVisible] = useState(false);\r\n    const [isBuyEnable, setIsBuyEnable] = useState(false)\r\n    const [buyLevelLoader, setbuyLevelLoader] = useState(false)\r\n    const [reinvestCount, setReinvestCount] = useState(0)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n\r\n    function getFlooredFixed(v, d) {\r\n        return (Math.floor(v * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n            if (tronWebState.installed) {\r\n                settronWeb(tronWebState)\r\n                return resolve();\r\n            }\r\n            let tries = 0;\r\n            const timer = setInterval(() => {\r\n                if (tries >= 10) {\r\n                    const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n                    settronWeb({\r\n                        installed: false,\r\n                        loggedIn: false\r\n                    });\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                if (!tronWebState.installed) {\r\n                    return tries++;\r\n                }\r\n                else {\r\n                    clearInterval(timer);\r\n                }\r\n                settronWeb(tronWebState)\r\n                resolve();\r\n            }, 100);\r\n        })\r\n        await Utils.setTronWeb(window.tronWeb);\r\n        showLevelDetails()\r\n    }, []);\r\n\r\n    const showLevelDetails = async () => {\r\n        let userAddress = window.tronWeb.defaultAddress.base58\r\n        if (localStorage.getItem('backOfficeID') != null && localStorage.getItem('accessToken') == 'Login') {\r\n            userAddress = localStorage.getItem('backOfficeID')\r\n        }\r\n        try {\r\n            SetisModalOpen(true)\r\n            const lastlavel = await Utils.contract.usersactiveX5Levels(userAddress, level).call();\r\n            if (lastlavel) {\r\n                setIsBuyEnable(false)\r\n                setIsBuyVisible(false)\r\n            }\r\n            else {\r\n                setIsBuyVisible(true)\r\n                if (toggleLevel) {\r\n                    setIsBuyEnable(true)\r\n                    toggleLevel = false\r\n                }\r\n                else {\r\n                    setIsBuyEnable(false)\r\n                }\r\n            }\r\n            const userX5Matrix = await Utils.contract.usersx5Matrix(userAddress, level).call();\r\n            setReinvestCount(parseInt(userX5Matrix[3]._hex))\r\n            const reinvestCountL = parseInt(userX5Matrix[3]._hex);\r\n            if (userX5Matrix.length > 0) {\r\n                setnumberOfActiveLevels(userX5Matrix[1].length)\r\n                let sum = 0;\r\n                if (userX5Matrix[1].length > 0 && lastlavel) {\r\n                    sum = ((5 * reinvestCountL) + userX5Matrix[1].length) * parseFloat(parseFloat(ammount))\r\n                    backofficeContextL.dispatchM({ type: 'chnage5x', payload: getFlooredFixed(sum, 3) })\r\n                }\r\n            }\r\n            else {\r\n                if (lang === 'English') {\r\n                    toast.warn(\"Error\")\r\n                }\r\n                else {\r\n                    toast.warn(\"Error\")\r\n                }\r\n            }\r\n            SetisModalOpen(false)\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            SetisModalOpen(false)\r\n        }\r\n    }\r\n\r\n    const FunBuyLevel = async (level, ammount) => {\r\n        let warnmsg = \"Please do not refresh the page and wait while we are processing your payment. This can take a few minutes.\"\r\n\r\n        if (lang !== 'English') {\r\n            warnmsg = \"No actualice la página y espere mientras procesamos su pago. Esto puede tardar unos minutos.\"\r\n        }\r\n        if (localStorage.getItem('backOfficeID') === null || localStorage.getItem('backOfficeID') === window.tronWeb.defaultAddress.base58) {\r\n            try {\r\n                setbuyLevelLoader(true)\r\n                toast.warn(warnmsg, {\r\n                    position: \"top-center\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                await Utils.contract.buyNewLevel(1, level).send({\r\n                    feeLimit: 100000000,\r\n                    callValue: (ammount * 1000000) + ((ammount * 1000000) * 0.10),\r\n                    shouldPollResponse: true\r\n\r\n                });\r\n                setbuyLevelLoader(false)\r\n                window.location.reload(false);\r\n\r\n            } catch (error) {\r\n                console.log(error);\r\n                setbuyLevelLoader(false)\r\n                toast.error(\"error\");\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.error(\"Purchase in preview mode is not available! Please please Register with your Tron wallet.\");\r\n            }\r\n            else {\r\n                toast.error(\"¡La compra en modo de vista previa no está disponible! Regístrese con su billetera de Tron.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const getActiveLevels = [...Array(numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position position_active\"></div>)\r\n    const getNonActiveLevels = [...Array(4 - numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position\"></div>)\r\n    const getBuyIcon = (level) => {\r\n        if (isBuyEnable) {\r\n            return (<i className=\"buy-icon5X buy-icon\" alt=\"buyIcon\" onClick={() => FunBuyLevel(level, ammount)} ></i>)\r\n        }\r\n        else {\r\n            return (<i className=\"buy-icon5X\" alt=\"buyIcon\"></i>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"matrix_box\">\r\n                <Loader active={isModalOpen} />\r\n                <MyClockLoader active={buyLevelLoader} />\r\n                <ToastContainerCust />\r\n                <div className={isBuyVisible ? \"box_basket\" : \"box_basket activeLevel\"} style={{ position: \"relative\" }}>\r\n                    <div className=\"box_number\" id=\"box_number\">{level}</div>\r\n                    {isBuyVisible ? getBuyIcon(level) : null}\r\n                    <button className=\"btn btn-info basket_btn basket_active\">{ammount} trx</button>\r\n                </div>\r\n                <div className=\"box_positions\">\r\n                    {getActiveLevels}\r\n                    {getNonActiveLevels}\r\n                    <div className=\"position position_reset\" />\r\n                </div>\r\n                <div className=\"flow_lines\">\r\n                    <div className=\"flow_line line_one\"></div>\r\n                    <div className=\"flow_line line_two\"></div>\r\n                    <div className=\"flow_line line_three\"></div>\r\n                    <div className=\"flow_line line_four\"></div>\r\n                    <div className=\"flow_line line_five\"></div>\r\n                    <div className=\"flow_line line_six\"></div>\r\n                </div>\r\n                {!isBuyVisible ?\r\n                    <div className=\"reload-data\">\r\n                        <div>\r\n                            <span style={{ color: \"white\", fontSize: \"20px\", paddingRight: 5 }}>{(5 * reinvestCount) + numberOfActiveLevels}</span>\r\n                            <FaUsers color=\"#35FF69\" size={25} />\r\n                        </div>\r\n                        <div>\r\n                            <span style={{ color: \"white\", fontSize: \"20px\", paddingRight: 5 }}>{reinvestCount}</span>\r\n                            <FiRefreshCcw color=\"#35FF69\" size={25} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    : null\r\n                }\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(SubPart5X)\r\n",{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":2,"column":10,"nodeType":"132","messageId":"133","endLine":2,"endColumn":16},{"ruleId":"130","severity":1,"message":"134","line":24,"column":22,"nodeType":"132","messageId":"133","endLine":24,"endColumn":33},{"ruleId":"135","severity":1,"message":"136","line":75,"column":8,"nodeType":"137","endLine":75,"endColumn":10,"suggestions":"138"},{"ruleId":"130","severity":1,"message":"139","line":18,"column":12,"nodeType":"132","messageId":"133","endLine":18,"endColumn":19},{"ruleId":"135","severity":1,"message":"140","line":29,"column":15,"nodeType":"141","endLine":71,"endColumn":6},{"ruleId":"130","severity":1,"message":"142","line":16,"column":7,"nodeType":"132","messageId":"133","endLine":16,"endColumn":19},{"ruleId":"130","severity":1,"message":"139","line":43,"column":12,"nodeType":"132","messageId":"133","endLine":43,"endColumn":19},{"ruleId":"135","severity":1,"message":"140","line":48,"column":15,"nodeType":"141","endLine":90,"endColumn":6},{"ruleId":"130","severity":1,"message":"139","line":32,"column":12,"nodeType":"132","messageId":"133","endLine":32,"endColumn":19},{"ruleId":"135","severity":1,"message":"140","line":38,"column":15,"nodeType":"141","endLine":117,"endColumn":6},{"ruleId":"135","severity":1,"message":"143","line":117,"column":8,"nodeType":"137","endLine":117,"endColumn":10,"suggestions":"144"},{"ruleId":"130","severity":1,"message":"145","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"146","line":1,"column":28,"nodeType":"132","messageId":"133","endLine":1,"endColumn":38},{"ruleId":"130","severity":1,"message":"139","line":18,"column":12,"nodeType":"132","messageId":"133","endLine":18,"endColumn":19},{"ruleId":"130","severity":1,"message":"147","line":25,"column":14,"nodeType":"132","messageId":"133","endLine":25,"endColumn":29},{"ruleId":"135","severity":1,"message":"148","line":69,"column":8,"nodeType":"137","endLine":69,"endColumn":10,"suggestions":"149"},{"ruleId":"130","severity":1,"message":"139","line":23,"column":12,"nodeType":"132","messageId":"133","endLine":23,"endColumn":19},{"ruleId":"135","severity":1,"message":"140","line":32,"column":15,"nodeType":"141","endLine":72,"endColumn":6},{"ruleId":"135","severity":1,"message":"148","line":72,"column":8,"nodeType":"137","endLine":72,"endColumn":10,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":76,"column":97,"nodeType":"153","messageId":"154","endLine":76,"endColumn":99},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'setUserData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["157"],"'tronWeb' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'WEBSTORE_URL' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'backofficeContextL'. Either include it or remove the dependency array.",["158"],"'useEffect' is defined but never used.","'useReducer' is defined but never used.","'getFlooredFixed' is defined but never used.","React Hook useEffect has a missing dependency: 'showLevelDetails'. Either include it or remove the dependency array.",["159"],["160"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},"Update the dependencies array to be: [props.location.state]",{"range":"168","text":"169"},"Update the dependencies array to be: [backofficeContextL]",{"range":"170","text":"171"},"Update the dependencies array to be: [showLevelDetails]",{"range":"172","text":"173"},{"range":"174","text":"173"},[2412,2414],"[props.location.state]",[4540,4542],"[backofficeContextL]",[2744,2746],"[showLevelDetails]",[2741,2743]]