[{"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\index.js":"1","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\reportWebVitals.js":"2","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\App.js":"3","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\routes.js":"4","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\AuthGaurd.js":"5","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\context\\AuthContext.js":"6","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Common\\Loader.js":"7","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Login\\Login.js":"8","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeMain.js":"9","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\LandingMian.js":"10","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Tutorial\\Tutorial.js":"11","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Registration\\Registration.js":"12","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Common\\ToastContainerCust.js":"13","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeSideDashboard.js":"14","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeStatusFor5x.js":"15","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\Nav.js":"16","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeStatusFor12x.js":"17","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Counter.js":"18","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Features.js":"19","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Faq.js":"20","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Matrix.js":"21","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Utils\\Utils.js":"22","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\SubPart5X.js":"23","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\SubPart12X.js":"24"},{"size":517,"mtime":1612525838102,"results":"25","hashOfConfig":"26"},{"size":375,"mtime":1612525838102,"results":"27","hashOfConfig":"26"},{"size":1702,"mtime":1612525838077,"results":"28","hashOfConfig":"26"},{"size":1208,"mtime":1612525838103,"results":"29","hashOfConfig":"26"},{"size":417,"mtime":1612525838078,"results":"30","hashOfConfig":"26"},{"size":1143,"mtime":1612525838101,"results":"31","hashOfConfig":"26"},{"size":718,"mtime":1612525838078,"results":"32","hashOfConfig":"26"},{"size":7690,"mtime":1612525838085,"results":"33","hashOfConfig":"26"},{"size":3763,"mtime":1612525838079,"results":"34","hashOfConfig":"26"},{"size":3266,"mtime":1612525838084,"results":"35","hashOfConfig":"26"},{"size":11583,"mtime":1612525838086,"results":"36","hashOfConfig":"26"},{"size":8528,"mtime":1612525838085,"results":"37","hashOfConfig":"26"},{"size":416,"mtime":1612525838079,"results":"38","hashOfConfig":"26"},{"size":10621,"mtime":1612526994899,"results":"39","hashOfConfig":"26"},{"size":2760,"mtime":1612525838080,"results":"40","hashOfConfig":"26"},{"size":2088,"mtime":1612525838081,"results":"41","hashOfConfig":"26"},{"size":1716,"mtime":1612525838080,"results":"42","hashOfConfig":"26"},{"size":896,"mtime":1612525838082,"results":"43","hashOfConfig":"26"},{"size":3454,"mtime":1612525838083,"results":"44","hashOfConfig":"26"},{"size":6361,"mtime":1612525838083,"results":"45","hashOfConfig":"26"},{"size":2216,"mtime":1612525838084,"results":"46","hashOfConfig":"26"},{"size":714,"mtime":1612537029016,"results":"47","hashOfConfig":"26"},{"size":9100,"mtime":1612525838082,"results":"48","hashOfConfig":"26"},{"size":9471,"mtime":1612525838082,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"13gdzx5",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"52"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\index.js",[],["112","113"],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\reportWebVitals.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\App.js",["114"],"import React, { Suspense, Fragment } from 'react';\r\nimport { Router, Switch, Route, HashRouter } from 'react-router-dom';\r\nimport { routes } from '../src/routes';\r\nimport { createBrowserHistory } from 'history';\r\nimport AuthContext from \"../src/context/AuthContext\";\r\nimport AuthGuard from '../src/AuthGaurd';\r\nimport './custom.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport Loader from './Common/Loader'\r\n\r\n// const FOUNDATION_ADDRESS = 'TXdoGJ93xpjL6HZ53ZaN3ER7aUDDzyNaxV';\r\n// const WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\r\n\r\n\r\n\r\n\r\nconst history = createBrowserHistory();\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"globalwrap\">\r\n      <AuthContext>\r\n        <HashRouter history={history}>\r\n          <RenderRoutes data={routes} />\r\n        </HashRouter>\r\n      </AuthContext>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\nfunction RenderRoutes(props) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <Loader active={true}></Loader>\r\n      }>\r\n      <Switch>\r\n        {props.data.map((route, i) => {\r\n          const Component = route.component;\r\n          const Guard = route.guard ? AuthGuard : Fragment;\r\n          return (\r\n            <Route\r\n              exact={route.exact}\r\n              key={i}\r\n              path={route.path}\r\n              render={(props) => (\r\n                <Guard>\r\n                  {route.routes\r\n                    ? <RenderRoutes data={route.routes} />\r\n                    : <Component {...props} />}\r\n                </Guard>\r\n              )}\r\n            />\r\n          )\r\n        })}\r\n      </Switch>\r\n    </Suspense>\r\n  )\r\n}\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\routes.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\AuthGaurd.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\context\\AuthContext.js",["115"],"import React, { createContext, useState } from 'react';\r\nimport axios from 'axios';\r\n// import ApiConfig from 'src/config/ApiConfig';\r\nexport const AuthContext = createContext();\r\n\r\nconst setSession = (accessToken) => {\r\n    if (accessToken) {\r\n        localStorage.setItem('accessToken', accessToken);\r\n        axios.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\r\n    } else {\r\n        localStorage.removeItem('accessToken');\r\n        delete axios.defaults.headers.common.Authorization;\r\n    }\r\n};\r\n\r\nfunction checkLogin() {\r\n    const accessToken = window.localStorage.getItem('accessToken');\r\n    return accessToken ? true : false;\r\n}\r\n\r\n\r\nexport default function AuthProvider(props) {\r\n    const [isLogin, setIsLogin] = useState(checkLogin());\r\n    const [userData, setUserData] = useState({});\r\n\r\n    let data = {\r\n        userLoggedIn: isLogin,\r\n        userData,\r\n        userLogIn: (type, data) => {\r\n            setSession(data);\r\n            setIsLogin(type);\r\n        },\r\n    }\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={data}>\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Common\\Loader.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Login\\Login.js",["116","117"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { AuthContext } from '../../context/AuthContext'\r\n// import TronWeb from 'tronweb'\r\nimport { FaSignInAlt } from \"react-icons/fa\";\r\nimport { toast } from 'react-toastify';\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\n\r\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\r\n\r\nfunction Login(props) {\r\n    const lang = props.location && props.location.state\r\n    const history = useHistory();\r\n    const auth = useContext(AuthContext);\r\n    const [backOfficeID, SetBackOfficeID] = useState('')\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n\r\n    useEffect(async () => {\r\n        (async function () {\r\n            await new Promise(resolve => {\r\n                const tronWebState = {\r\n                    installed: !!window.tronWeb,\r\n                    loggedIn: window.tronWeb && window.tronWeb.ready\r\n                };\r\n                if (tronWebState.installed) {\r\n                    settronWeb(tronWebState)\r\n                    return resolve();\r\n                }\r\n                let tries = 0;\r\n                const timer = setInterval(() => {\r\n                    if (tries >= 10) {\r\n                        const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                        window.tronWeb = new TronWeb(\r\n                            TRONGRID_API,\r\n                            TRONGRID_API,\r\n                            TRONGRID_API\r\n                        );\r\n                        settronWeb({\r\n                            installed: false,\r\n                            loggedIn: false\r\n                        });\r\n                        clearInterval(timer);\r\n                        return resolve();\r\n                    }\r\n                    tronWebState.installed = !!window.tronWeb;\r\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                    if (!tronWebState.installed) {\r\n                        return tries++;\r\n                    }\r\n                    else {\r\n                        clearInterval(timer);\r\n                    }\r\n                    settronWeb(tronWebState)\r\n                    resolve();\r\n                }, 100);\r\n            })\r\n            await Utils.setTronWeb(window.tronWeb);\r\n            setLoggedIn(true)\r\n        })();\r\n    }, []);\r\n\r\n    const CustomToastWithLink = () => (\r\n        <p>\r\n            {lang === 'English'\r\n                ?\r\n                <span>To invest in  TRON GET EXPRESS you must install TronLink. TronLink is a TRON wallet for the browser\r\n                        that can be <a style={{ color: \"black\" }} href={WEBSTORE_URL} target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\r\n                        Once installed, return back and refresh the page</span>\r\n                :\r\n                <span>Para invertir en TRON GET EXPRESS debe instalar TronLink. TronLink es una billetera TRON para el navegador\r\n                        eso puede ser <a style={{ color: \"black\" }} href={WEBSTORE_URL} target='_blank' rel='noopener noreferrer'>instalado desde Chrome Webstore</a>.\r\n                        Una vez instalado, regrese y actualice la página.e</span>\r\n            }\r\n\r\n        </p>\r\n    );\r\n\r\n    const loginSubmit = async () => {\r\n        if (backOfficeID !== '') {\r\n            if (loggedIn) {\r\n                try {\r\n                    const idToAddress = await Utils.contract.idToAddress(backOfficeID).call();\r\n                    auth.userLogIn(true, 'Login');\r\n                    localStorage.removeItem('backOfficeID')\r\n                    localStorage.setItem('backOfficeID', TronWeb.address.fromHex(idToAddress));\r\n                    history.push({\r\n                        pathname: \"/back-office-main\",\r\n                        state: { lang: lang }\r\n                    })\r\n                    window.location.reload(false);\r\n                }\r\n                catch (error) {\r\n                    toast.error(\"Error\")\r\n                    console.log(error)\r\n                }\r\n            }\r\n            else {\r\n                toast.error(CustomToastWithLink)\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.warn(\"Enter Id\")\r\n            }\r\n            else {\r\n                toast.warn(\"Ingrese Id\")\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"\" id=\"backofficewrap\">\r\n            <ToastContainerCust />\r\n            <div className=\"container\">\r\n                <div className=\"text-center logo-payment-wrap\">\r\n                    <Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                    </Link>\r\n                </div>\r\n                <div className=\"row \" id=\"\">\r\n                    <div className=\"\" style={{ width: \"100%\" }}>\r\n                        <div className=\"xwrap\">\r\n                            <div className=\"text-center registration-items\">\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h2>Login Area</h2>\r\n                                        :\r\n                                        <h2>Área de inicio de sesión</h2>\r\n                                }\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4>Enter your ID to access your backoffice</h4>\r\n                                        :\r\n                                        <h4>Ingrese su ID para acceder a su backoffice</h4>\r\n                                }\r\n\r\n                                <div className=\"registration-input\">\r\n                                    <input type=\"text\" value={backOfficeID} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} />\r\n                                </div>\r\n                                <div className=\"registration-btn\">\r\n                                    <button className=\"btn btn-success custombtn\" onClick={() => loginSubmit()} >LOGIN</button>\r\n                                </div>\r\n                                <div className=\"h20\"></div>\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4>Don't have an account yet?</h4>\r\n                                        :\r\n                                        <h4>¿Aún no tienes una cuenta?</h4>\r\n                                }\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <Link to={{ pathname: \"/registration\", state: lang }}><h4><FaSignInAlt />  Register</h4></Link>\r\n                                        :\r\n                                        <Link to={{ pathname: \"/registration\", state: lang }}><h4><FaSignInAlt />  REGISTRO</h4></Link>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeMain.js",["118","119","120","121","122","123"],"import React, { useEffect, useReducer } from 'react'\r\nimport BackOfficeSideDashboard from './BackOfficeSideDashboard'\r\nimport BackOfficeStatusFor12x from './BackOfficeStatusFor12x'\r\nimport BackOfficeStatusFor5x from './BackOfficeStatusFor5x'\r\nimport MyNav from './Nav'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link } from 'react-router-dom';\r\nimport { FaPowerOff, FaRegFileAlt, FaTelegramPlane } from \"react-icons/fa\";\r\n\r\nconst initialState = {\r\n    total5x: 0,\r\n    buyIcon5x: false,\r\n    total12x: 0,\r\n    buyIcon12x: false,\r\n    loginUser: 0,\r\n    total: 0,\r\n    usdValue: 0,\r\n    partnerCount: 0,\r\n    lang: \"English\",\r\n    partnerCountM2: 0\r\n}\r\n\r\nexport const BackofficeContext = React.createContext(initialState)\r\n\r\nconst reducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'chnage5x':\r\n            return {\r\n                ...state,\r\n                total: state.total + parseFloat(action.payload),\r\n                total5x: parseFloat(state.total5x) + parseFloat(action.payload)\r\n            };\r\n        case 'change12x':\r\n            return {\r\n                ...state,\r\n                total: state.total + parseFloat(action.payload),\r\n                total12x: parseFloat(state.total12x) + parseFloat(action.payload)\r\n\r\n            };\r\n        case 'partnerCount':\r\n            return {\r\n                ...state,\r\n                partnerCount: action.payload\r\n            };\r\n        case 'partnerCountM2':\r\n            return {\r\n                ...state,\r\n                partnerCountM2: state.partnerCountM2 + action.payload\r\n            };\r\n        case 'lang':\r\n            return {\r\n                ...state,\r\n                lang: action.payload\r\n            };\r\n        case 'SetusdValue':\r\n            return { ...state, usdValue: action.payload };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction BackOfficeMain(props) {\r\n    \r\n    const [backofficeData, dispatch] = useReducer(reducer, initialState)\r\n    let lang = props.location && props.location.state && props.location.state.lang\r\n    lang = typeof lang === \"undefined\" ? \"English\" : \"Spanish\"\r\n\r\n    useEffect(() => {\r\n        (async function () {\r\n            document.title = \"XTRON\"\r\n            if (props.location.state && typeof props.location.state !== 'undefined') {\r\n                dispatch({ type: 'setloginUser', payload: props.location.state.id })\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <BackofficeContext.Provider value={{ backofficeDataM: backofficeData, dispatchM: dispatch }}>\r\n            <div className=\"\" id=\"backofficewrap\">\r\n                <MyNav />\r\n                <h2 className=\"text-center whitext mt-5\">Dashboard</h2>\r\n                <div className=\"text-center logo-payment-wrap\" style={{ marginTop: \"0px\" }}>\r\n                    {/*<Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                    </Link>*/}\r\n                </div>\r\n                <div className=\"container\">\r\n                    <div className=\"row \" id=\"backoffice_row\">\r\n                        <div className=\"col-lg-3\">\r\n                            <BackOfficeSideDashboard lang={lang} />\r\n                        </div>\r\n                        <div className=\"col-lg-9\">\r\n                            <BackOfficeStatusFor5x lang={lang} />\r\n                            <BackOfficeStatusFor12x lang={lang} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </BackofficeContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BackOfficeMain\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\LandingMian.js",["124","125"],"import React, { useEffect, useState } from 'react'\r\nimport Counter from './Counter'\r\nimport Faq from './Faq'\r\nimport Features from './Features'\r\nimport Matrix from './Matrix'\r\nimport logo_banner from '../../assets/img/xtronlong.png'\r\nimport tron32x from '../../assets/img/tron32x.png'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nfunction LandingMian(props) {\r\n    const propslang = props.location && props.location.state\r\n    useEffect(() => {\r\n        document.title = \"XTRON\"\r\n    }, []);\r\n\r\n    const [lang, setLang] = useState(propslang === \"Spanish\" ? \"Spanish\" : \"English\")\r\n    const history = useHistory();\r\n    const navigateTo = (url) => {\r\n        history.push({\r\n            pathname: url,\r\n            state: lang\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {/* <Heading /> */}\r\n            <div className=\"container text-center\">\r\n                <div style={{ display: \"flex\", justifyContent: \"flex-end\", marginTop: \"5px\" }}>\r\n                    <select name=\"lang\" id=\"lang\" value={lang} onChange={(e) => setLang(e.target.value)}>\r\n                        <option value=\"English\">English</option>\r\n                        <option value=\"Spanish\">Spanish</option>\r\n                    </select>\r\n                </div>\r\n                <p id=\"address\">\r\n                    {lang === 'English' ? \"Contract address\" : \"Direccion del contrato\"} : <a target=\"_blank\" href={`https://shasta.tronscan.org/#/contract/${process.env.REACT_APP_CONTRACT_ADDRESS}/code`}>{process.env.REACT_APP_CONTRACT_ADDRESS}</a></p>\r\n                <div className=\"heading-content text-center\">\r\n                    <img src={logo_banner} id=\"logohead\" className=\"mt-5\" alt=\"logo_banner\" />\r\n                    <br />\r\n                    <img src={tron32x} className=\"tron_currency-2\" alt=\"tron32x\" />\r\n                    <h1 className=\"mt-5 whitext heading-title\"><strong>\r\n                        {lang === 'English' ? \"HYBRID MARKETING SMART CONTRACT\" : \"CONTRATO INTELIGENTE DE MARKETING HÍBRIDO\"}</strong></h1>\r\n                    <h2 className=\"whitext lightweight\">\r\n                        {lang === 'English' ? \"100% decentralized and independent\" : \"100% descentralizado e independiente\"}</h2>\r\n                    <div className=\"mt-5\">\r\n                        <button className=\"btn btn-success custombtn\" onClick={() => navigateTo('/registration')}>\r\n                            {lang === 'English' ? \"REGISTER\" : \"REGISTRO\"}</button>\r\n                        <button className=\"btn btn-light custombtn\" onClick={() => navigateTo('/tutorial')}>\r\n                            {lang === 'English' ? \"TUTORIAL\" : \"TUTORIAL\"}</button>\r\n                        <button className=\"btn btn-info custombtn\" onClick={() => navigateTo('/login')}>\r\n                            {lang === 'English' ? \"LOGIN\" : \"LOGIN\"}\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Features lang={lang} />\r\n            {/*<Counter lang={lang} />*/}\r\n            <br /><br /><br />\r\n            <Matrix lang={lang} />\r\n            <Faq lang={lang} />\r\n\r\n            <h4 className=\"text-center pb-5 signature\">XTRON GLOBAL 2021</h4>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default LandingMian\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Tutorial\\Tutorial.js",["126","127","128","129"],"import React from 'react'\r\nimport tron32x from '../../assets/img/tron32x.png'\r\nimport x5matrix from '../../assets/img/m1.png'\r\nimport x12matrix from '../../assets/img/m2.png'\r\nimport m1dist from '../../assets/img/m1-dist.png'\r\nimport M2dist from '../../assets/img/M2-dist.jpg'\r\nimport reinvest from '../../assets/img/reinvest.png'\r\nimport upgrade from '../../assets/img/6th.png'\r\nimport Simult from '../../assets/img/SIMULT.png'\r\nimport { FaUsers, FaFacebook, FaTwitter, FaRegCopy } from \"react-icons/fa\";\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport MyNav from '../BackOffice/Nav'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Tutoril() {\r\n    return (\r\n        <div class=\"\" id=\"backofficewrap\">\r\n            <MyNav />\r\n            <h2 className=\"text-center whitext mt-5\">Tutorial</h2>\r\n            <div class=\"container\">\r\n                <div class=\"row \" id=\"backoffice_row\">\r\n                    <div class=\"col-lg-3\">\r\n                        <div class=\"userdef xwrap\">\r\n                            <div class=\"userdefinition\">\r\n                                <div class=\"paymentlogo\">\r\n                                    {/* <!--    <img src=\"./assets/img/tron64x.png\" alt=\"tron xtron logo\" id=\"tronxlogo\">  --> */}\r\n                                    <h4 class=\"whitext\">USER 01</h4>\r\n                                </div>\r\n                                <div class=\"userinfo text-right\">\r\n                                    <h4 class=\"whitext\">#  <FaUsers color=\"#35FF69\" /></h4>\r\n                                </div>\r\n                            </div>\r\n                            <h2 class=\"text-left ctatext\">$3,0000 USD</h2>\r\n                            <h4 class=\"subtext earning_amount text-left\">$$$ TRX <img src={tron32x} alt=\"tron32x\" class=\"tron_currency\" /></h4>\r\n                            {/* <!---  <button class=\"btn btn-success custom_btn\" id=\"trx_amount\"> TRX Amount</button> --> */}\r\n                            <hr class=\"custom_hr\" />\r\n                            <div class=\"matrix_earnings\">\r\n                                <img class=\"matrix_logo\" alt=\"tron32x\" src={x5matrix} />\r\n                                <h4 class=\"whitext\">Earnings</h4>\r\n                                <div class=\"earning_amount_container\">\r\n                                    <h5 class=\"ctatext earning_amount\">$1,500 USD</h5>\r\n                                </div>\r\n                                <h5 class=\"earning_amount_trx subtext\">22,000 TRX  <img src={tron32x} alt=\"tron32x\" class=\"tron_currency\" /></h5>\r\n                            </div>\r\n                            <hr class=\"custom_hr\" />\r\n                            <div class=\"matrix_earnings\">\r\n                                <img class=\"matrix_logo\" src={x12matrix} alt=\"M2dist\" />\r\n                                <h4 class=\"whitext\">Earnings</h4>\r\n                                <div class=\"earning_amount_container\">\r\n                                    <h5 class=\"ctatext earning_amount\">$1,500 USD</h5>\r\n                                </div>\r\n                                <h5 class=\"earning_amount_trx subtext\">22,000 TRX  <img src={tron32x} alt=\"tron32x\" class=\"tron_currency\" /></h5>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"affiliate_wrap xwrap\">\r\n                            <div class=\"affiliate_heading\">\r\n                                <h4 class=\"ctatext\">Affiliate Link</h4>\r\n                                <h4 class=\"whitext\"># <FaUsers color=\"#35FF69\" /></h4>\r\n                            </div>\r\n                            <div class=\"link_container\">\r\n                                <input type=\"text\" value=\"https://xtron.io/\" id=\"refLink\" readonly />\r\n                                <FaRegCopy className=\"ctatext\" />\r\n                            </div>\r\n                            <hr class=\"custom_hr\" />\r\n                            <div class=\"social_buttons\">\r\n                                <a><FaFacebook className=\"subtext\" /></a> &nbsp;&nbsp;&nbsp;\r\n                                <a><FaTwitter className=\"subtext\" /></a>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"wallet_wrap xwrap\">\r\n                            <h5 class=\"ctatext\">Your TRX Wallet:</h5>\r\n                            <p class=\"whitext\">00000000000000000000000000000000000000000000000</p>\r\n                        </div>\r\n\r\n                        <div class=\"contract_wrap xwrap\">\r\n                            <h5 class=\"ctatext\">Smart Contract Address :</h5>\r\n                            <p class=\"whitext\">00000000000000000000000000000000000000000000000</p>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-lg-9\" >\r\n                        <div class=\"xwrap\">\r\n                            <div class=\"title_container\">\r\n                                {/* <!--<img src=\"./assets/img/m1.png\" id=\"title_container_img\"> --> */}\r\n                                <h2 class=\"ctatext\">How does xtron's hybrid marketing works?</h2>\r\n                                <p class=\"whitext\">XTRON hybrid marketing is a marketing system where you\r\n                                buy slots once and can make money with them indefinitely.</p>\r\n\r\n                                <p class=\"whitext\">When you sign up, you get a referral link which is\r\n                                tied to you and the person who invited you.</p>\r\n\r\n                                <p class=\"whitext\">Your first purchase ($10) goes towards the first slots of the\r\n                                M1 & M2 matrices simultaneously ($5 each). After the first purchase, you can buy\r\n                                any slot you wish</p>\r\n\r\n                                <img class=\"first-payment-img\" src={Simult} alt=\"xtron matrix first payment\" />\r\n                                <br />\r\n\r\n                                <h2 class=\"ctatext\">SLOTS</h2>\r\n                                <p class=\"whitext\">Each of these two matrices (M1 & M2) has 10 slots. Each subsequent slot is 2x\r\n                                    more expensive than the previous one, and profits from each subsequent slot are 2x higher.</p>\r\n                                <p class=\"whitext\">After your first purchase, you can buy any additional slot from one matrix without having\r\n                                to buy the same slot from the other matrix.\r\n                                    </p>\r\n                                <p class=\"text-center subtext\"><i class=\"fa fa-lightbulb-o\" aria-hidden=\"true\"></i> Slots have no\r\n                                        expiration date, so once you buy a slot, it's yours forever!</p>\r\n                                <br />\r\n                                <h4 class=\"ctatext\">M1 Slots</h4>\r\n                                <p class=\"whitext\">In the M1 matrix, you can earn 100% the cost of a slot for every single person\r\n                                        you refer to that slot</p>\r\n\r\n                                <img class=\"first-payment-img\" src={m1dist} alt=\"xtron m1 matrix payment distribution\" />\r\n                                <br />\r\n                                <h4 class=\"ctatext\">M2 Slots</h4>\r\n                                <p class=\"whitext\">In the M2 matrix, you can earn 20% of the transaction volume of up to 5 levels below\r\n                                you in the referral chain.\r\n                                    </p>\r\n                                <img class=\"first-payment-img\" src={M2dist} alt={\"M2dist\"} />\r\n                                <br />\r\n\r\n                                <h2 class=\"ctatext\">Registration</h2>\r\n                                <p class=\"whitext\">The only requirement to be participate in the XTRON Smart Contract is to purchase the first\r\n                                slots of each matrix. The first slots of each matrixx cost $5 each and they are bought together. All further\r\n                                    slots can be purchased separately so, for example, you can purchase the 4th slot of the M1 matrix without having the 3rd slot.</p>\r\n                                <br />\r\n\r\n                                <h2 class=\"ctatext\">Reinvestments</h2>\r\n                                <p class=\"whitext\">A reinvestment clears the slot for you, so you can keep referring people and earning\r\n                                money from it.\r\n                                    </p>\r\n                                <p class=\"whitext\">Reinvestments happen automatically the moment you refer a new user into the last free\r\n                                place of a slot. Also, you reappear in a free space of your sponsor everytime a reinvestment happens to you.\r\n                                    </p>\r\n                                <img class=\"first-payment-img\" src={reinvest} alt=\"xtron reinvest payment img matrix\" />\r\n                                <br />\r\n\r\n                                <h2 class=\"ctatext\">Upgrade</h2>\r\n                                <p class=\"whitext\">An upgrade is the opening a higher slot. It is done once, and then that new slot is yours forever. Your\r\n                                upgrade payment goes to the person who referred you.\r\n                                    </p>\r\n                                <h4 class=\"ctatext\">Why should you upgrade your matrix?</h4>\r\n                                <p class=\"whitext\">Upgrading is optional, but your earning potential is multiplied with every additional slot\r\n                                you buy. Let's look at it this way:\r\n                                    </p>\r\n                                <p class=\"subtext text-center\">You earn $5 for every person you refer to the 1st slot of the M1 matrix, but you can earn $160 for\r\n                                every person you refer to the 6th slot of the M1 matrix.\r\n                                    </p>\r\n                                <img class=\"first-payment-img\" src={upgrade} alt=\"xtron matrix payment 6th slot\" />\r\n                                <br />\r\n                                <h2 class=\"ctatext\">Terms and Definitions</h2>\r\n                                <ul class=\"whitext\">\r\n                                    <li>Sponsor:    The person whose referral link you used to sign up.</li>\r\n                                    <li>Referral:   A person who joins Xtron using your referral link.</li>\r\n                                    <li>Upgrade: It's the purchase of a higher slot in any matrix.</li>\r\n                                    <li>Reinvest:   It's an automatic re-opening of a slot to continue earning money from it.</li>\r\n                                    <li>Lost Profit:    Payment which goes to a higher partner because it comes from a matrix slot you have not purchased yet.</li>\r\n                                    <li>Extra Profit:   Payment which goes to you because a lower partner doesn't own a particular slot in their matrix.</li>\r\n                                    <li>Residual Income: Income which comes from your first 5 referral levels on the M2 matrix automatically.</li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"definitions\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tutoril\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Registration\\Registration.js",["130","131"],"import React, { useEffect, useState } from 'react'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport TronWeb from 'tronweb'\r\nimport { toast } from 'react-toastify';\r\nimport { FaExclamationCircle, FaSignInAlt } from \"react-icons/fa\";\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport Utils from '../../Utils/Utils'\r\nimport { MyClockLoader } from '../../Common/Loader'\r\n\r\nfunction Registration(props) {\r\n    const lang = props.location && props.location.state\r\n    const history = useHistory();\r\n    const [backOfficeID, SetBackOfficeID] = useState('')\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n    const [isModalOpen, SetisModalOpen] = useState(false)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n    const { id } = useParams();\r\n    const CustomToastWithLink = () => (\r\n        <p>\r\n            Please login to your tronlink account\r\n        </p>\r\n    );\r\n\r\n    useEffect(async () => {\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n\r\n            if (tronWebState.installed) {\r\n                settronWeb(tronWebState)\r\n                return resolve();\r\n            }\r\n            let tries = 0;\r\n            const timer = setInterval(() => {\r\n                if (tries >= 10) {\r\n                    const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n                    settronWeb({\r\n                        installed: false,\r\n                        loggedIn: false\r\n                    });\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                if (!tronWebState.installed) {\r\n                    return tries++;\r\n                }\r\n                else {\r\n                    clearInterval(timer);\r\n                }\r\n                settronWeb(tronWebState)\r\n\r\n                resolve();\r\n            }, 100);\r\n        })\r\n        await Utils.setTronWeb(window.tronWeb);\r\n        setLoggedIn(true)\r\n    }, []);\r\n\r\n    const registationSubmit = async () => {\r\n        let warnmsg = \"No actualice la página y espere mientras procesamos su pago. Esto puede tardar unos minutos.\"\r\n\r\n        localStorage.removeItem('backOfficeID')\r\n        if (backOfficeID !== '' || id !== undefined) {\r\n            if (loggedIn) {\r\n                try {\r\n                    SetisModalOpen(true)\r\n                    if (lang === 'English') {\r\n                        warnmsg = \"Please do not refresh the page and wait while we are processing your payment. This can take a few minutes.\"\r\n                    }\r\n                    toast.warn(warnmsg, {\r\n                        position: \"top-center\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: false,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                    const idToAddress = await Utils.contract.idToAddress(backOfficeID).call();\r\n                    const tronAdd = TronWeb.address.fromHex(idToAddress)\r\n                    await Utils.contract.registrationExt(tronAdd).send({\r\n                        feeLimit: 100000000,\r\n                        callValue: 440000000,\r\n                        shouldPollResponse: true\r\n                    });\r\n                    SetisModalOpen(false)\r\n                    history.push({\r\n                        pathname: \"/back-office-main\",\r\n                        state: { lang: lang }\r\n                    })\r\n                    window.location.reload(false);\r\n                } catch (error) {\r\n                    SetisModalOpen(false)\r\n                    console.log(error)\r\n                    toast.error(\"error\", error)\r\n                }\r\n            }\r\n            else {\r\n                toast.error(CustomToastWithLink)\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.warn(\"Enter Refferal address\")\r\n            }\r\n            else {\r\n                toast.warn(\"Ingrese la dirección de referencia\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"\" id=\"backofficewrap\">\r\n            <ToastContainerCust />\r\n            <div className=\"container\">\r\n                <div className=\"text-center logo-payment-wrap\">\r\n                    {\r\n                        isModalOpen ?\r\n                            <div className=\"logo-payment-link\">\r\n                                <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                            </div> :\r\n                            <Link to={{\r\n                                pathname: \"/\",\r\n                                state: lang\r\n                            }} className=\"logo-payment-link\">\r\n                                <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                            </Link>\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"row \" id=\"\">\r\n                    <div className=\"registration-main\" style={{ width: \"100%\" }}>\r\n                        <div className=\"xwrap\">\r\n                            <div className=\"text-center registration-items\">\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h2>Registration Area</h2>\r\n                                        :\r\n                                        <h2>Área de registro</h2>\r\n                                }\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4>If you don't have a sponsor, use 01</h4>\r\n                                        :\r\n                                        <h4>Si no tiene un patrocinador, use 01</h4>\r\n                                }\r\n\r\n\r\n                                <MyClockLoader active={isModalOpen} />\r\n                                {id ?\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={id} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} readOnly />\r\n                                    </div>\r\n                                    :\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={backOfficeID} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} />\r\n                                    </div>\r\n                                }\r\n                                <div className=\"registration-btn\">\r\n                                    <button className=\"btn btn-success custombtn\" onClick={() => registationSubmit()} disabled={isModalOpen} >{lang === 'English' ? \"REGISTER\" : \"REGISTRO\"}</button>\r\n                                </div>\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4><FaExclamationCircle /> Check the ID of your sponsor before making a payment.</h4>\r\n                                        :\r\n                                        <h4><FaExclamationCircle /> Verifique la identificación de su patrocinador antes de realizar un pago.</h4>\r\n                                }\r\n                                <div className=\"h20\"></div>\r\n                                {\r\n                                    isModalOpen ? <span><h4><FaSignInAlt /> Login</h4></span> : <Link to={{ pathname: \"/login\", state: lang }}><h4><FaSignInAlt /> Login</h4></Link>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Common\\ToastContainerCust.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeSideDashboard.js",["132","133","134","135"],"import React, { useEffect, useContext } from 'react'\r\nimport tron32x from '../../assets/img/tron32x.png'\r\nimport x5matrix from '../../assets/img/m1.png'\r\nimport x12matrix from '../../assets/img/m2.png'\r\nimport { useState } from 'react'\r\nimport { FaUsers, FaRegCopy } from \"react-icons/fa\";\r\nimport { BackofficeContext } from './BackOfficeMain'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\nimport TostContainer from '../../Common/ToastContainerCust'\r\nimport { toast } from 'react-toastify';\r\nimport axios from 'axios'\r\n\r\nfunction copyAffiliateLink() {\r\n    var copyText = document.getElementById(\"refLink\");\r\n    copyText.select();\r\n    // copyText.setSelectionRange(0, 99999); /*For mobile devices*/\r\n    document.execCommand(\"copy\");\r\n    toast.success(\"Copied\")\r\n}\r\n\r\nfunction BackOfficeSideDashboard(props) {\r\n\r\n    const lang = props.lang\r\n       \r\n    const backofficeContextL = useContext(BackofficeContext)\r\n\r\n    const [UserId, setUserId] = useState(0)\r\n    const [partnersCount, setpartnersCount] = useState(0)\r\n    const [tronAccount, setTronAccount] = useState(\"\")\r\n    const [x12balanceTRX, setx12balanceTRX] = useState(0)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n\r\n\r\n    useEffect(async () => {\r\n        axios.get(`https://api.coinlore.net/api/ticker/?id=2713`)\r\n            .then(res => {\r\n                backofficeContextL.dispatchM({ type: 'SetusdValue', payload: res.data[0].price_usd })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n                window.location.reload(false);\r\n            })\r\n\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n            if (tronWebState.installed) {\r\n                settronWeb(tronWebState)\r\n                return resolve();\r\n            }\r\n            let tries = 0;\r\n            const timer = setInterval(() => {\r\n                if (tries >= 10) {\r\n                    const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n\r\n                    settronWeb({\r\n                        installed: false,\r\n                        loggedIn: false\r\n                    });\r\n\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                if (!tronWebState.installed) {\r\n                    return tries++;\r\n                }\r\n                else {\r\n                    clearInterval(timer);\r\n                }\r\n                settronWeb(tronWebState)\r\n                resolve();\r\n            }, 100);\r\n        })\r\n\r\n        await Utils.setTronWeb(window.tronWeb);\r\n        if (localStorage.getItem('backOfficeID') !== null && localStorage.getItem('accessToken') === 'Login') {\r\n            setTronAccount(localStorage.getItem('backOfficeID'))\r\n            try {\r\n                const lastlavel = await Utils.contract.users(localStorage.getItem('backOfficeID')).call();\r\n                const x12balance = await Utils.contract.x12balance(localStorage.getItem('backOfficeID')).call();\r\n                setx12balanceTRX((parseInt(x12balance._hex) / 1000000));\r\n                console.log(\"x12balance\", (parseInt(x12balance._hex) / 1000000))\r\n                setUserId(lastlavel.id._hex)\r\n                setpartnersCount(lastlavel.partnersCount._hex)\r\n                backofficeContextL.dispatchM({ type: 'partnerCount', payload: lastlavel.partnersCount._hex })\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n        else {\r\n            setTronAccount(window.tronWeb.defaultAddress.base58)\r\n            try {\r\n                const lastlavel = await Utils.contract.users(window.tronWeb.defaultAddress.base58).call();\r\n                setUserId(lastlavel.id._hex)\r\n                setpartnersCount(lastlavel.partnersCount._hex)\r\n                backofficeContextL.dispatchM({ type: 'partnerCount', payload: lastlavel.partnersCount._hex })\r\n            }\r\n            catch (error) {\r\n                console.log(error)\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    function getFlooredFixed(v, d) {\r\n        return (Math.floor(v * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"userdef xwrap\">\r\n                <TostContainer />\r\n                <div className=\"userdefinition\">\r\n                    <div className=\"paymentlogo\">\r\n                        {\r\n                            lang === \"English\"\r\n                                ?\r\n                                <h3 className=\"whitext\">MY ID: {parseInt(UserId)}</h3>\r\n                                :\r\n                                <h3 className=\"whitext\">MI ID: {parseInt(UserId)}</h3>\r\n                        }\r\n\r\n                    </div>\r\n                    {/* <div className=\"userinfo text-right\">\r\n                        <h4 className=\"whitext\">{parseInt(partnersCount)} <FaUsers color=\"#35FF69\" /></h4>\r\n                    </div> */}\r\n                </div>\r\n                <h2 className=\"text-left ctatext\">\r\n                    $ {getFlooredFixed(((backofficeContextL.backofficeDataM.total5x + x12balanceTRX) * backofficeContextL.backofficeDataM.usdValue), 2)} USD\r\n                </h2>\r\n                <h2 className=\"subtext earning_amount text-left\">{backofficeContextL.backofficeDataM.total5x + x12balanceTRX} TRX <img src={tron32x} className=\"tron_currency\" alt=\"tron32x\" /></h2>\r\n                <hr className=\"custom_hr\" />\r\n                <div className=\"matrix_earnings\" style={{ paddingTop: \"0\" }}>\r\n                    {/* <img className=\"matrix_logo\" src={x5matrix} alt=\"x5matrix\" /> */}\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <img className=\"matrix_logo\" src={x5matrix} alt=\"x5matrix\" />\r\n                        <div className=\"userinfo text-right\" style={{ marginTop: \"20%\" }}>\r\n                            <h3 className=\"whitext\">{parseInt(partnersCount)} <FaUsers color=\"#35FF69\" /></h3>\r\n                        </div>\r\n                    </div>\r\n\r\n                    {\r\n                        lang === 'English' ?\r\n                            <h3 className=\"whitext\">Earnings</h3>\r\n                            :\r\n                            <h3 className=\"whitext\">Ganancias</h3>\r\n                    }\r\n\r\n                    <div className=\"earning_amount_container\">\r\n                        <h2 className=\"ctatext earning_amount\">$ {getFlooredFixed((backofficeContextL.backofficeDataM.total5x * backofficeContextL.backofficeDataM.usdValue), 2)} USD</h2>\r\n                    </div>\r\n                    <h2 className=\"earning_amount_trx subtext\">{backofficeContextL.backofficeDataM.total5x} TRX  <img src={tron32x} className=\"tron_currency\" alt=\"tron32x\" /></h2>\r\n                </div>\r\n                <hr className=\"custom_hr\" />\r\n                <div className=\"matrix_earnings\" style={{ paddingTop: \"0\" }}>\r\n                    {/* <img className=\"matrix_logo\" src={x12matrix} alt=\"x12matrix\" /> */}\r\n                    <div style={{ display: \"flex\" }}>\r\n                        <img className=\"matrix_logo\" src={x12matrix} alt=\"x12matrix\" />\r\n                        <div className=\"userinfo text-right\" style={{ marginTop: \"20%\" }}>\r\n                            <h3 className=\"whitext\">{parseInt(backofficeContextL.backofficeDataM.partnerCountM2)} <FaUsers color=\"#35FF69\" /></h3>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        lang === 'English' ?\r\n                            <h3 className=\"whitext\">Earnings</h3>\r\n                            :\r\n                            <h3 className=\"whitext\">Ganancias</h3>\r\n                    }\r\n\r\n                    <div className=\"earning_amount_container\">\r\n                        <h2 className=\"ctatext earning_amount\">$ {getFlooredFixed((x12balanceTRX * backofficeContextL.backofficeDataM.usdValue), 2)} USD</h2>\r\n                    </div>\r\n                    <h2 className=\"earning_amount_trx subtext\">{x12balanceTRX} TRX  <img src={tron32x} className=\"tron_currency\" alt=\"tron32x\" /></h2>\r\n                </div>\r\n            </div>\r\n            <div className=\"affiliate_wrap xwrap\">\r\n                <div className=\"affiliate_heading\">\r\n                    {\r\n                        lang === 'English' ?\r\n                            <h3 className=\"ctatext\">Affiliate Link</h3>\r\n                            :\r\n                            <h3 className=\"ctatext\">Enlace de afiliado</h3>\r\n                    }\r\n\r\n                    <h3 className=\"whitext\">{parseInt(partnersCount)} <FaUsers color=\"#35FF69\" /></h3>\r\n                </div>\r\n                <div className=\"link_container\">\r\n                    {/* <input type=\"text\" value={`${process.env.REACT_APP_URL}/#/registration/${parseInt(UserId)}`} id=\"refLink\" readOnly /> */}\r\n                    <input type=\"text\" value={`${process.env.REACT_APP_URL}/#/registration/${parseInt(UserId)}`} id=\"refLink\" readOnly />\r\n                    <FaRegCopy className=\"ctatext\" onClick={copyAffiliateLink} />\r\n                </div>\r\n            </div>\r\n            <div className=\"wallet_wrap xwrap\">\r\n                {\r\n                    lang === 'English' ?\r\n                        <h3 className=\"ctatext\">My TRX Wallet:</h3>\r\n                        :\r\n                        <h3 className=\"ctatext\">Mi billetera de TRX:</h3>\r\n                }\r\n                <p className=\"whitext\">{tronAccount}</p>\r\n            </div>\r\n            <div className=\"contract_wrap xwrap\">\r\n                {\r\n                    lang === 'English' ?\r\n                        <h3 className=\"ctatext\">Smart Contract Address :</h3>\r\n                        :\r\n                        <h3 className=\"ctatext\">Dirección de contrato inteligente:</h3>\r\n                }\r\n                <a href={`https://shasta.tronscan.org/#/contract/${process.env.REACT_APP_CONTRACT_ADDRESS}/code`} target=\"_blank\"> <p className=\"whitext\">{process.env.REACT_APP_CONTRACT_ADDRESS}</p></a>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BackOfficeSideDashboard\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeStatusFor5x.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\Nav.js",["136","137"],"import React, { useEffect, useReducer } from 'react'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link } from 'react-router-dom';\r\nimport { FaPowerOff, FaRegFileAlt, FaTelegramPlane, FaDollarSign } from \"react-icons/fa\";\r\n\r\nfunction MyNav(lang) {\r\n    return (\r\n        <div className=\"navig d-flex justify-content-center shadow\">\r\n                    <div className=\"container d-flex justify-content-between align-items-center\">\r\n                    \r\n\r\n                    <Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <img className=\"logo-payment-nav\" src={xtronLogo} alt=\"logo xtron\" />\r\n                    </Link>\r\n                    \r\n                    \r\n                    <div className=\"action-links\">\r\n                    <Link to={{\r\n                        pathname: \"/back-office-main\",\r\n                        state: lang\r\n                    }} className=\"navicon\">\r\n                        <FaDollarSign size={30} /> <span className=\"naviconTXT\">Dashboard</span>\r\n                    </Link>\r\n\r\n                    <a rel=\"noreferrer\" target=\"_blank\" className=\"navicon\" href=\"https://t.me/xtronoficial\"><FaTelegramPlane size={30} /> <span className=\"naviconTXT\">News</span></a>\r\n                        \r\n                    \r\n\r\n                    <Link to={{\r\n                        pathname: \"/tutorial\",\r\n                        state: lang\r\n                    }} className=\"navicon\">\r\n                        <FaRegFileAlt size={30} /> <span className=\"naviconTXT\">Tutorial</span>\r\n                    </Link>\r\n\r\n                    \r\n\r\n                    <Link to={{\r\n                        pathname: \"/\",\r\n                        state: lang\r\n                    }} className=\"logo-payment-link\">\r\n                        <FaPowerOff size={30} color={'#f33f3f'}/>\r\n                    </Link>\r\n\r\n\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n    )\r\n}\r\n\r\nexport default MyNav","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\BackOfficeStatusFor12x.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Counter.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Features.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Faq.js",["138","139","140","141","142","143"],"import React from 'react'\r\n\r\nfunction Faq(props) {\r\n    let lang = props.lang\r\n    const faqDetails = (summaryTxt, pTxt) => {\r\n        return (\r\n            <details>\r\n                <summary>{summaryTxt}</summary>\r\n                <p className=\"text\">{pTxt}</p>\r\n            </details>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"faqBox mt-5\">\r\n                <h2 className=\"text-center ctatext\">\r\n                    {lang === 'English' ? \"FREQUENTLY ASKED QUESTIONS\" : \"PREGUNTAS FRECUENTES\"}\r\n\r\n                </h2>\r\n                <div className=\"faqs\">\r\n                    {\r\n                        lang === 'English' ?\r\n                            faqDetails(\r\n                                'What is XTRON?',\r\n                                'XTRON is the first 100% decentralized smart contract based on Tron (TRX) which operates automatically and without human intervention.')\r\n                            :\r\n                            faqDetails(\r\n                                '¿Qué es XTRON?',\r\n                                'XTRON es el primer contrato inteligente 100% decentralizado basado en Tron (TRX) el cual opera de forma automática y sin intervención humana.')\r\n\r\n                    }\r\n                    {\r\n                        lang === 'English' ?\r\n                            faqDetails('Who runs the platform?', 'After being activated, a smart contract operates automatically and independently. This quality eliminates human error in the routine operations of the contract.')\r\n                            :\r\n                            faqDetails('¿Quién maneja la plataforma?', 'Luego de ser activado, un contrato inteligente opera de forma automática e independiente. Esta cualidad elimina el error humano en las operaciones rutinarias del contrato.')\r\n                    }\r\n                    {\r\n                        lang === 'English' ?\r\n                            faqDetails('Who created XTRON?', 'XTRON is an open source platform developed by various smart contract programmers and enthusiasts.')\r\n                            :\r\n                            faqDetails('¿Quién creó XTRON?', 'XTRON es una plataforma de código abierto desarrollada por diversos programadores y entusiastas de los contratos inteligentes.')}\r\n                    {\r\n                        lang === 'English' ?\r\n                            faqDetails('What is Tron (TRX)?', 'Tron is a cryptocurrency with a capitalization that exceeds $ 1.8 Billion dollars.')\r\n                            :\r\n                            faqDetails('¿Qué es Tron (TRX)?', 'Tron es una criptomoneda con una capitalización que supera $1.8 Billones de dólares.')\r\n                    }\r\n                    {\r\n                        lang === 'English' ?\r\n                            faqDetails('What is a Smart Contract?', 'A smart contract (in English Smart contract) is a computer program that executes registered agreements between two or more parties in an automatic and unalterable way.')\r\n                            :\r\n                            faqDetails('¿Qué es un Contrato Inteligente?', 'Un contrato inteligente (en inglés Smart contract) es un programa informático que ejecuta acuerdos registrados entre dos o más partes de forma automática e inalterable.')\r\n                    }\r\n                    <details>\r\n                        {\r\n                            lang === 'English' ?\r\n                                <summary>What do I need to be part of XTRON?</summary>\r\n                                :\r\n                                <summary>¿Qué necesito para formar parte de XTRON?</summary>\r\n                        }\r\n\r\n                        {\r\n                            lang === 'English' ?\r\n                                <p className=\"text\">To be part of the XTRON community you only need to install a wallet on your smartphone, tablet or PC.\r\n                                <br /><br />\r\n                                For mobile Android devices: <a target=\"_blank\" href=\"https://play.google.com/store/apps/details?id=com.tronlinkpro.wallet\">Tronlink Android</a>\r\n                                <br />\r\n                                For mobile iOS devices: <a target=\"_blank\" href=\"https://apps.apple.com/us/app/tronlink-trx-btt-wallet/id1453530188\">Tronlink iOS</a>\r\n                                <br />\r\n                                For PC (Chrome Extension): <a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/tronlink%EF%BC%88%E6%B3%A2%E5%AE%9D%E9%92%B1%E5%8C%85%EF%BC%89/ibnejdfjmmkpcnlpebklmnkoeoihofec/related\">Tronlink Chrome</a></p>\r\n                                :\r\n                                <p className=\"text\">Para formar parte de la comunidad de XTRON solo necesitas instalar una wallet en tu smartphone, tablet o PC.\r\n                                <br /><br />\r\n                                Para móviles Android: <a target=\"_blank\" href=\"https://play.google.com/store/apps/details?id=com.tronlinkpro.wallet\">Tronlink Android</a>\r\n                                <br />\r\n                                Para móviles iOS: <a target=\"_blank\" href=\"https://apps.apple.com/us/app/tronlink-trx-btt-wallet/id1453530188\">Tronlink iOS</a>\r\n                                <br />\r\n                                Para PC (Chrome Extension): <a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/tronlink%EF%BC%88%E6%B3%A2%E5%AE%9D%E9%92%B1%E5%8C%85%EF%BC%89/ibnejdfjmmkpcnlpebklmnkoeoihofec/related\">Tronlink Chrome</a></p>\r\n                        }\r\n                    </details>\r\n                    {\r\n                        lang === 'English' ?\r\n                            faqDetails('What is a Smart Contract? ', 'A smart contract (in English Smart contract) is a computer program that executes registered agreements between two or more parties in an automatic and unalterable way.')\r\n                            :\r\n                            faqDetails('¿Qué es un Contrato Inteligente?', 'Un contrato inteligente (en inglés Smart contract) es un programa informático que ejecuta acuerdos registrados entre dos o más partes de forma automática e inalterable.')\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Faq\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\Landing\\Matrix.js",["144","145","146","147"],"import React from 'react'\r\nimport m1img from '../../assets/img/m1-mt.svg'\r\nimport m2img from '../../assets/img/m2-mt.svg'\r\nimport m1logo from '../../assets/img/m1.png'\r\nimport m2logo from '../../assets/img/m2.png'\r\nfunction Matrix(props) {\r\n    let lang = props.lang\r\n    return (\r\n        <div className=\"container mt-5\" id=\"matrix\">\r\n            <div className=\"matrix_title text-center\">\r\n                <h2 className=\"ctatext\">\r\n                    {lang === 'English' ? \"COMMISSIONS SYSTEM\" : \"SISTEMA DE COMISIONES\"}\r\n                </h2>\r\n                <h2 className=\"whitext heading-title\">\r\n                    {lang === 'English' ? \"KNOW THE M1 AND M2 MATRICES\" : \"CONOCE LAS MATRICES M1 Y M2\"}\r\n                </h2>\r\n            </div>\r\n            <div className=\"matrix_boxes mt-5\">\r\n                <div className=\"show-matrix\" id=\"boxone\">\r\n                    <div className=\"show-wrap\">\r\n                        <img className=\"show-matrix-label\" src={m1logo}></img>\r\n                        <img className=\"show-img\" src={m1img}></img>\r\n                        <div className=\"show-text\">\r\n                            <h4> {lang === 'English' ? \"You earn 100% commission for every friend you refer to the M1 Matrix.\" : \"Ganas una comisión de un 100% por cada amigo que refieras a tu matríz M1.\"}</h4>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"show-matrix\" id=\"boxtwo\">\r\n                    <div className=\"show-wrap\">\r\n                        <img className=\"show-matrix-label\" src={m2logo}></img>\r\n                        <img className=\"show-img\" src={m2img}></img>\r\n                        <div className=\"show-text\">\r\n                        <h4> {lang === 'English' ? \"You earn 20% commission from 5 levels for every user you and your friends refer to the M2 Matrix.\" : \"Ganas un 20% por 5 niveles por cada usuario directo o indirecto que se encuentre en tu matríz M2.\"}</h4>\r\n                            \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Matrix\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Utils\\Utils.js",[],"D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\SubPart5X.js",["148","149","150","151"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { BackofficeContext } from './BackOfficeMain'\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\nimport Loader from '../../Common/Loader'\r\nimport { MyClockLoader } from '../../Common/Loader'\r\nimport { FaUsers } from \"react-icons/fa\";\r\nimport { FiRefreshCcw } from \"react-icons/fi\";\r\n\r\n\r\nlet toggleLevel = true\r\n\r\nfunction SubPart5X({ level, ammount, lang }) {\r\n    const [numberOfActiveLevels, setnumberOfActiveLevels] = useState(0);\r\n    const backofficeContextL = useContext(BackofficeContext)\r\n    const [isModalOpen, SetisModalOpen] = useState(false)\r\n    const [isBuyVisible, setIsBuyVisible] = useState(false);\r\n    const [isBuyEnable, setIsBuyEnable] = useState(false)\r\n    const [buyLevelLoader, setbuyLevelLoader] = useState(false)\r\n    const [reinvestCount, setReinvestCount] = useState(0)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n\r\n    function getFlooredFixed(v, d) {\r\n        return (Math.floor(v * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);\r\n    }\r\n\r\n    useEffect(async () => {\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n            if (tronWebState.installed) {\r\n                settronWeb(tronWebState)\r\n                return resolve();\r\n            }\r\n            let tries = 0;\r\n            const timer = setInterval(() => {\r\n                if (tries >= 10) {\r\n                    const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n                    settronWeb({\r\n                        installed: false,\r\n                        loggedIn: false\r\n                    });\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                if (!tronWebState.installed) {\r\n                    return tries++;\r\n                }\r\n                else {\r\n                    clearInterval(timer);\r\n                }\r\n                settronWeb(tronWebState)\r\n                resolve();\r\n            }, 100);\r\n        })\r\n        await Utils.setTronWeb(window.tronWeb);\r\n        showLevelDetails()\r\n    }, []);\r\n\r\n    const showLevelDetails = async () => {\r\n        let userAddress = window.tronWeb.defaultAddress.base58\r\n        if (localStorage.getItem('backOfficeID') != null && localStorage.getItem('accessToken') == 'Login') {\r\n            userAddress = localStorage.getItem('backOfficeID')\r\n        }\r\n        try {\r\n            SetisModalOpen(true)\r\n            const lastlavel = await Utils.contract.usersactiveX5Levels(userAddress, level).call();\r\n            if (lastlavel) {\r\n                setIsBuyEnable(false)\r\n                setIsBuyVisible(false)\r\n            }\r\n            else {\r\n                setIsBuyVisible(true)\r\n                if (toggleLevel) {\r\n                    setIsBuyEnable(true)\r\n                    toggleLevel = false\r\n                }\r\n                else {\r\n                    setIsBuyEnable(false)\r\n                }\r\n            }\r\n            const userX5Matrix = await Utils.contract.usersx5Matrix(userAddress, level).call();\r\n            setReinvestCount(parseInt(userX5Matrix[3]._hex))\r\n            const reinvestCountL = parseInt(userX5Matrix[3]._hex);\r\n            if (userX5Matrix.length > 0) {\r\n                setnumberOfActiveLevels(userX5Matrix[1].length)\r\n                let sum = 0;\r\n                if (userX5Matrix[1].length > 0 && lastlavel) {\r\n                    sum = ((5 * reinvestCountL) + userX5Matrix[1].length) * parseFloat(parseFloat(ammount))\r\n                    backofficeContextL.dispatchM({ type: 'chnage5x', payload: getFlooredFixed(sum, 3) })\r\n                }\r\n            }\r\n            else {\r\n                if (lang === 'English') {\r\n                    toast.warn(\"Error\")\r\n                }\r\n                else {\r\n                    toast.warn(\"Error\")\r\n                }\r\n            }\r\n            SetisModalOpen(false)\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            SetisModalOpen(false)\r\n        }\r\n    }\r\n\r\n    const FunBuyLevel = async (level, ammount) => {\r\n        let warnmsg = \"Please do not refresh the page and wait while we are processing your payment. This can take a few minutes.\"\r\n\r\n        if (lang !== 'English') {\r\n            warnmsg = \"No actualice la página y espere mientras procesamos su pago. Esto puede tardar unos minutos.\"\r\n        }\r\n        if (localStorage.getItem('backOfficeID') === null || localStorage.getItem('backOfficeID') === window.tronWeb.defaultAddress.base58) {\r\n            try {\r\n                setbuyLevelLoader(true)\r\n                toast.warn(warnmsg, {\r\n                    position: \"top-center\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                await Utils.contract.buyNewLevel(1, level).send({\r\n                    feeLimit: 100000000,\r\n                    callValue: (ammount * 1000000) + ((ammount * 1000000) * 0.10),\r\n                    shouldPollResponse: true\r\n\r\n                });\r\n                setbuyLevelLoader(false)\r\n                window.location.reload(false);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setbuyLevelLoader(false)\r\n                toast.error(\"error\");\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.error(\"Purchase in preview mode is not available! Please please Register with your Tron wallet.\");\r\n            }\r\n            else {\r\n                toast.error(\"¡La compra en modo de vista previa no está disponible! Regístrese con su billetera Tron.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const getActiveLevels = [...Array(numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position position_active\"></div>)\r\n    const getNonActiveLevels = [...Array(4 - numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position\"></div>)\r\n    const getBuyIcon = (level) => {\r\n        if (isBuyEnable) {\r\n            return (<i className=\"buy-icon5X buy-icon\" alt=\"buyIcon\" onClick={() => FunBuyLevel(level, ammount)} ></i>)\r\n        }\r\n        else {\r\n            return (<i className=\"buy-icon5X\" alt=\"buyIcon\"></i>)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"matrix_box\">\r\n                <Loader active={isModalOpen} />\r\n                <MyClockLoader active={buyLevelLoader} />\r\n                <ToastContainerCust />\r\n                <div className={isBuyVisible ? \"box_basket\" : \"box_basket activeLevel\"} style={{ position: \"relative\" }}>\r\n                    <div className=\"box_number\" id=\"box_number\">{level}</div>\r\n                    {isBuyVisible ? getBuyIcon(level) : null}\r\n                    <button className=\"btn btn-info basket_btn basket_active\">{ammount} trx</button>\r\n                </div>\r\n                <div className=\"box_positions\">\r\n                    {getActiveLevels}\r\n                    {getNonActiveLevels}\r\n                    <div className=\"position position_reset\" />\r\n                </div>\r\n                <div className=\"flow_lines\">\r\n                    <div className=\"flow_line line_one\"></div>\r\n                    <div className=\"flow_line line_two\"></div>\r\n                    <div className=\"flow_line line_three\"></div>\r\n                    <div className=\"flow_line line_four\"></div>\r\n                    <div className=\"flow_line line_five\"></div>\r\n                    <div className=\"flow_line line_six\"></div>\r\n                </div>\r\n                {!isBuyVisible ?\r\n                    <div className=\"reload-data\">\r\n                        <div>\r\n                            <span style={{ color: \"white\", fontSize: \"20px\", paddingRight: 5 }}>{(5 * reinvestCount) + numberOfActiveLevels}</span>\r\n                            <FaUsers color=\"#35FF69\" size={25} />\r\n                        </div>\r\n                        <div>\r\n                            <span style={{ color: \"white\", fontSize: \"20px\", paddingRight: 5 }}>{reinvestCount}</span>\r\n                            <FiRefreshCcw color=\"#35FF69\" size={25} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    : null\r\n                }\r\n\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(SubPart5X)\r\n","D:\\new\\trx-mlm-smart-contract-mobiloitte\\src\\Components\\BackOffice\\SubPart12X.js",["152","153","154"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { BackofficeContext } from './BackOfficeMain'\r\nimport { toast } from 'react-toastify';\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport TronWeb from 'tronweb'\r\nimport Utils from '../../Utils/Utils'\r\nimport Loader from '../../Common/Loader'\r\nimport { MyClockLoader } from '../../Common/Loader'\r\n\r\nlet toggleLevel = true\r\n\r\nfunction SubPart12X({ level, ammount, lang }) {\r\n    const [numberOfActiveLevels, setnumberOfActiveLevels] = useState(0);\r\n    const [numberOfSubActiveLevels, setnumberOfSubActiveLevels] = useState(0)\r\n    const [isBuyVisible, setIsBuyVisible] = useState(false);\r\n    const [isBuyEnable, setIsBuyEnable] = useState(false)\r\n    const [buyLevelLoader, setbuyLevelLoader] = useState(false)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n    const backofficeContextL = useContext(BackofficeContext)\r\n    const [isModalOpen, SetisModalOpen] = useState(false)\r\n\r\n    function getFlooredFixed(v, d) {\r\n        return (Math.floor(v * Math.pow(10, d)) / Math.pow(10, d)).toFixed(d);\r\n    }\r\n    useEffect(() => {\r\n        (async function () {\r\n            await new Promise(resolve => {\r\n                const tronWebState = {\r\n                    installed: !!window.tronWeb,\r\n                    loggedIn: window.tronWeb && window.tronWeb.ready\r\n                };\r\n\r\n                if (tronWebState.installed) {\r\n                    settronWeb(tronWebState)\r\n                    return resolve();\r\n                }\r\n                let tries = 0;\r\n                const timer = setInterval(() => {\r\n                    if (tries >= 10) {\r\n                        const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                        window.tronWeb = new TronWeb(\r\n                            TRONGRID_API,\r\n                            TRONGRID_API,\r\n                            TRONGRID_API\r\n                        );\r\n\r\n                        settronWeb({\r\n                            installed: false,\r\n                            loggedIn: false\r\n                        });\r\n\r\n                        clearInterval(timer);\r\n                        return resolve();\r\n                    }\r\n                    tronWebState.installed = !!window.tronWeb;\r\n                    tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                    if (!tronWebState.installed)\r\n                        return tries++;\r\n                    settronWeb(tronWebState)\r\n                    resolve();\r\n                }, 100);\r\n            })\r\n            await Utils.setTronWeb(window.tronWeb);\r\n            showLevelDetails()\r\n        })()\r\n    }, [])\r\n\r\n    const FunBuyLevel = async (level, ammount) => {\r\n        let warnmsg = \"Please do not refresh the page and wait while we are processing your payment. This can take a few minutes.\"\r\n\r\n        if (lang !== 'English') {\r\n            warnmsg = \"No actualice la página y espere mientras procesamos su pago. Esto puede tardar unos minutos.\"\r\n        }\r\n        if (localStorage.getItem('backOfficeID') === null || localStorage.getItem('backOfficeID') === window.tronWeb.defaultAddress.base58) {\r\n            try {\r\n                setbuyLevelLoader(true)\r\n                toast.warn(warnmsg, {\r\n                    position: \"top-center\",\r\n                    autoClose: 5000,\r\n                    hideProgressBar: false,\r\n                    closeOnClick: true,\r\n                    pauseOnHover: false,\r\n                    draggable: true,\r\n                    progress: undefined,\r\n                });\r\n                await Utils.contract.buyNewLevel(2, level).send({\r\n                    feeLimit: 100000000,\r\n                    callValue: (ammount * 1000000) + ((ammount * 1000000) * 0.10),\r\n                    shouldPollResponse: true\r\n                });\r\n                setbuyLevelLoader(false)\r\n                window.location.reload(false);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setbuyLevelLoader(false)\r\n                toast.error(\"error\");\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.error(\"Purchase in preview mode is not available! Please please Register with your Tron wallet.\");\r\n            }\r\n            else {\r\n                toast.error(\"¡La compra en modo de vista previa no está disponible! Regístrese con su billetera Tron.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    const showLevelDetails = async () => {\r\n        let userAddress = window.tronWeb.defaultAddress.base58\r\n        if (localStorage.getItem('backOfficeID') !== null && localStorage.getItem('accessToken') === 'Login') {\r\n            userAddress = localStorage.getItem('backOfficeID')\r\n        }\r\n        try {\r\n            SetisModalOpen(true)\r\n            const lastlavel = await Utils.contract.usersactiveX12Levels(userAddress, level).call();\r\n            if (lastlavel) {\r\n                setIsBuyEnable(false)\r\n                setIsBuyVisible(false)\r\n            }\r\n            else {\r\n                setIsBuyVisible(true)\r\n                if (toggleLevel) {\r\n                    setIsBuyEnable(true)\r\n                    toggleLevel = false\r\n                }\r\n                else {\r\n                    setIsBuyEnable(false)\r\n                }\r\n            }\r\n            const userX5Matrix = await Utils.contract.usersx12Matrix(userAddress, level).call();\r\n            if (userX5Matrix.length > 0) {\r\n                setnumberOfActiveLevels(userX5Matrix[1].length)\r\n                setnumberOfSubActiveLevels(userX5Matrix[2].length)\r\n                console.log(\"userX5Matrix[1].length\", userX5Matrix[1].length)\r\n                console.log(\"userX5Matrix[2].length\", userX5Matrix[2].length)\r\n                let sum = 0;\r\n                if (userX5Matrix[1].length > 0 && lastlavel) {\r\n                    // sum = parseFloat(ammount) + (parseFloat(userX5Matrix[1].length) * parseFloat(parseFloat(ammount) / 2) + (parseFloat(userX5Matrix[2].length) * (parseFloat(parseFloat(ammount) / 4))))\r\n                    // backofficeContextL.dispatchM({ type: 'change12x', payload: getFlooredFixed(sum, 3) })\r\n\r\n                    sum = userX5Matrix[1].length + userX5Matrix[2].length\r\n                    backofficeContextL.dispatchM({ type: 'partnerCountM2', payload: sum })\r\n                }\r\n            }\r\n            else {\r\n                if (lang === 'English') {\r\n                    toast.warn(\"Error\")\r\n                }\r\n                else {\r\n                    toast.warn(\"Error\")\r\n                }\r\n            }\r\n            SetisModalOpen(false)\r\n        }\r\n        catch (err) {\r\n            console.log(err)\r\n            SetisModalOpen(false)\r\n        }\r\n    }\r\n\r\n    const getActiveLevels = [...Array(numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position position_active\"></div>)\r\n    const getNonActiveLevels = [...Array(3 - numberOfActiveLevels)].map((e, i) => <div key={i} className=\"position\"></div>)\r\n    const getSubActiveLevels = [...Array(numberOfSubActiveLevels)].map((e, i) => <div key={i} className=\"subposition position_active\"></div>)\r\n    const getNonSubActiveLevels = [...Array(8 - numberOfSubActiveLevels)].map((e, i) => <div key={i} className=\"subposition\"></div>)\r\n    const getBuyIcon = isBuyEnable ?\r\n        <i className=\"buy-iconX12 buy-icon\" alt=\"buyIcon\" onClick={() => FunBuyLevel(level, ammount)} ></i> :\r\n        <i className=\"buy-iconX12\" alt=\"buyIcon\"></i>\r\n\r\n    return (\r\n        <div className=\"matrix_box_x12\">\r\n            <ToastContainerCust />\r\n            <Loader active={isModalOpen} />\r\n            <MyClockLoader active={buyLevelLoader} />\r\n            {/* <!--single matrix box--> */}\r\n            <div className=\"box_basket\" style={{ position: \"relative\" }}>\r\n                <div className=\"box_number_x12\" id=\"box_number_x12\">{level}</div>\r\n                {isBuyVisible ? getBuyIcon : null}\r\n                <button className=\"btn btn-info basket_btn basket_active\">{ammount} trx</button>\r\n            </div>\r\n            <div className=\"box_positions_x12\">\r\n                {getActiveLevels}\r\n                {getNonActiveLevels}\r\n            </div>\r\n            <div className=\"box_subpositions\">\r\n                {getSubActiveLevels}\r\n                {getNonSubActiveLevels}\r\n                <div className=\"subposition_refresh\"></div>\r\n            </div>\r\n            <div className=\"flow_lines\">\r\n                <div className=\"flow_line line_one_x12\"></div>\r\n                <div className=\"flow_line line_two_x12\"></div>\r\n                <div className=\"flow_line line_three_x12\"></div>\r\n                <div className=\"flow_line line_four_x12\"></div>\r\n                <div className=\"flow_line line_five_x12\"></div>\r\n                <div className=\"flow_line line_six_x12\"></div>\r\n                <div className=\"flow_line line_seven_x12\"></div>\r\n                <div className=\"flow_line line_eight_x12\"></div>\r\n                <div className=\"flow_line line_nine_x12\"></div>\r\n                <div className=\"flow_line line_ten_x12\"></div>\r\n                <div className=\"flow_line line_eleven_x12\"></div>\r\n                <div className=\"flow_line line_twelve_x12\"></div>\r\n                <div className=\"flow_line line_thirteen_x12\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubPart12X\r\n",{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":2,"column":10,"nodeType":"161","messageId":"162","endLine":2,"endColumn":16},{"ruleId":"159","severity":1,"message":"163","line":24,"column":22,"nodeType":"161","messageId":"162","endLine":24,"endColumn":33},{"ruleId":"159","severity":1,"message":"164","line":21,"column":12,"nodeType":"161","messageId":"162","endLine":21,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":26,"column":15,"nodeType":"167","endLine":68,"endColumn":6},{"ruleId":"159","severity":1,"message":"168","line":6,"column":8,"nodeType":"161","messageId":"162","endLine":6,"endColumn":17},{"ruleId":"159","severity":1,"message":"169","line":7,"column":10,"nodeType":"161","messageId":"162","endLine":7,"endColumn":14},{"ruleId":"159","severity":1,"message":"170","line":8,"column":10,"nodeType":"161","messageId":"162","endLine":8,"endColumn":20},{"ruleId":"159","severity":1,"message":"171","line":8,"column":22,"nodeType":"161","messageId":"162","endLine":8,"endColumn":34},{"ruleId":"159","severity":1,"message":"172","line":8,"column":36,"nodeType":"161","messageId":"162","endLine":8,"endColumn":51},{"ruleId":"165","severity":1,"message":"173","line":75,"column":8,"nodeType":"174","endLine":75,"endColumn":10,"suggestions":"175"},{"ruleId":"159","severity":1,"message":"176","line":2,"column":8,"nodeType":"161","messageId":"162","endLine":2,"endColumn":15},{"ruleId":"177","severity":1,"message":"178","line":36,"column":95,"nodeType":"179","endLine":36,"endColumn":110},{"ruleId":"159","severity":1,"message":"168","line":11,"column":8,"nodeType":"161","messageId":"162","endLine":11,"endColumn":17},{"ruleId":"159","severity":1,"message":"169","line":13,"column":10,"nodeType":"161","messageId":"162","endLine":13,"endColumn":14},{"ruleId":"180","severity":1,"message":"181","line":67,"column":33,"nodeType":"182","endLine":67,"endColumn":36},{"ruleId":"180","severity":1,"message":"181","line":68,"column":33,"nodeType":"182","endLine":68,"endColumn":36},{"ruleId":"159","severity":1,"message":"164","line":17,"column":12,"nodeType":"161","messageId":"162","endLine":17,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":28,"column":15,"nodeType":"167","endLine":70,"endColumn":6},{"ruleId":"159","severity":1,"message":"164","line":32,"column":12,"nodeType":"161","messageId":"162","endLine":32,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":38,"column":15,"nodeType":"167","endLine":117,"endColumn":6},{"ruleId":"165","severity":1,"message":"183","line":117,"column":8,"nodeType":"174","endLine":117,"endColumn":10,"suggestions":"184"},{"ruleId":"177","severity":1,"message":"178","line":223,"column":115,"nodeType":"179","endLine":223,"endColumn":130},{"ruleId":"159","severity":1,"message":"185","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":26},{"ruleId":"159","severity":1,"message":"186","line":1,"column":28,"nodeType":"161","messageId":"162","endLine":1,"endColumn":38},{"ruleId":"177","severity":1,"message":"178","line":67,"column":64,"nodeType":"179","endLine":67,"endColumn":79},{"ruleId":"177","severity":1,"message":"178","line":69,"column":60,"nodeType":"179","endLine":69,"endColumn":75},{"ruleId":"177","severity":1,"message":"178","line":71,"column":63,"nodeType":"179","endLine":71,"endColumn":78},{"ruleId":"177","severity":1,"message":"178","line":75,"column":58,"nodeType":"179","endLine":75,"endColumn":73},{"ruleId":"177","severity":1,"message":"178","line":77,"column":54,"nodeType":"179","endLine":77,"endColumn":69},{"ruleId":"177","severity":1,"message":"178","line":79,"column":64,"nodeType":"179","endLine":79,"endColumn":79},{"ruleId":"187","severity":1,"message":"188","line":21,"column":25,"nodeType":"182","endLine":21,"endColumn":73},{"ruleId":"187","severity":1,"message":"188","line":22,"column":25,"nodeType":"182","endLine":22,"endColumn":63},{"ruleId":"187","severity":1,"message":"188","line":32,"column":25,"nodeType":"182","endLine":32,"endColumn":73},{"ruleId":"187","severity":1,"message":"188","line":33,"column":25,"nodeType":"182","endLine":33,"endColumn":63},{"ruleId":"159","severity":1,"message":"164","line":23,"column":12,"nodeType":"161","messageId":"162","endLine":23,"endColumn":19},{"ruleId":"165","severity":1,"message":"166","line":32,"column":15,"nodeType":"167","endLine":72,"endColumn":6},{"ruleId":"165","severity":1,"message":"189","line":72,"column":8,"nodeType":"174","endLine":72,"endColumn":10,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":76,"column":97,"nodeType":"193","messageId":"194","endLine":76,"endColumn":99},{"ruleId":"159","severity":1,"message":"164","line":18,"column":12,"nodeType":"161","messageId":"162","endLine":18,"endColumn":19},{"ruleId":"159","severity":1,"message":"195","line":25,"column":14,"nodeType":"161","messageId":"162","endLine":25,"endColumn":29},{"ruleId":"165","severity":1,"message":"189","line":69,"column":8,"nodeType":"174","endLine":69,"endColumn":10,"suggestions":"196"},"no-native-reassign",["197"],"no-negated-in-lhs",["198"],"no-unused-vars","'Router' is defined but never used.","Identifier","unusedVar","'setUserData' is assigned a value but never used.","'tronWeb' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'xtronLogo' is defined but never used.","'Link' is defined but never used.","'FaPowerOff' is defined but never used.","'FaRegFileAlt' is defined but never used.","'FaTelegramPlane' is defined but never used.","React Hook useEffect has a missing dependency: 'props.location.state'. Either include it or remove the dependency array.","ArrayExpression",["199"],"'Counter' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'backofficeContextL'. Either include it or remove the dependency array.",["200"],"'useEffect' is defined but never used.","'useReducer' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has a missing dependency: 'showLevelDetails'. Either include it or remove the dependency array.",["201"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'getFlooredFixed' is defined but never used.",["202"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"207","fix":"209"},"Update the dependencies array to be: [props.location.state]",{"range":"210","text":"211"},"Update the dependencies array to be: [backofficeContextL]",{"range":"212","text":"213"},"Update the dependencies array to be: [showLevelDetails]",{"range":"214","text":"215"},{"range":"216","text":"215"},[2440,2442],"[props.location.state]",[4540,4542],"[backofficeContextL]",[2741,2743],"[showLevelDetails]",[2744,2746]]